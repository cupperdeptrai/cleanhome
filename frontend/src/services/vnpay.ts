/**
 * Service x·ª≠ l√Ω thanh to√°n VNPay cho d·ª± √°n CleanHome
 * Cung c·∫•p c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ t·∫°o thanh to√°n, ki·ªÉm tra tr·∫°ng th√°i, x·ª≠ l√Ω callback
 * Author: CleanHome Team
 */

import ApiService from './api';

/**
 * Interface cho d·ªØ li·ªáu t·∫°o thanh to√°n VNPay
 */
export interface CreateVnpayPaymentRequest {
  booking_id: string;
}

/**
 * Interface cho response t·∫°o thanh to√°n VNPay
 */
export interface CreateVnpayPaymentResponse {
  status: string;
  payment_url: string;
  booking_code: string;
  amount: number;
  message: string;
}

/**
 * Interface cho th√¥ng tin giao d·ªãch VNPay
 */
export interface VnpayTransaction {
  id: string;
  booking_id: string;
  user_id: string;
  vnp_Amount: number;
  vnp_BankCode?: string;
  vnp_BankTranNo?: string;
  vnp_CardType?: string;
  vnp_OrderInfo: string;
  vnp_PayDate?: string;
  vnp_ResponseCode?: string;
  vnp_TmnCode?: string;
  vnp_TransactionNo?: string;
  vnp_TransactionStatus?: string;
  vnp_TxnRef: string;
  is_successful: boolean;
  status_message: string;
  created_at: string;
  updated_at: string;
}

/**
 * Interface cho tr·∫°ng th√°i thanh to√°n
 */
export interface PaymentStatus {
  status: string;
  booking_code: string;
  payment_status: string;
  payment_method: string;
  total_amount: number;
  vnpay_transaction?: VnpayTransaction;
}

/**
 * Interface cho danh s√°ch giao d·ªãch c·ªßa user
 */
export interface UserTransactionsResponse {
  status: string;
  data: VnpayTransaction[];
  pagination: {
    page: number;
    pages: number;
    per_page: number;
    total: number;
    has_next: boolean;
    has_prev: boolean;
  };
}

/**
 * Class VNPay Service
 * X·ª≠ l√Ω c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn thanh to√°n VNPay
 */
export class VnpayService {
  
  /**
   * T·∫°o URL thanh to√°n VNPay cho booking ƒë√£ t·ªìn t·∫°i
   * @param bookingId ID c·ªßa booking c·∫ßn thanh to√°n
   * @returns Promise<CreateVnpayPaymentResponse> Th√¥ng tin URL thanh to√°n
   */
  public static async createPaymentUrl(bookingId: string): Promise<CreateVnpayPaymentResponse> {
    try {
      console.log('üè¶ T·∫°o URL thanh to√°n VNPay cho booking:', bookingId);
      
      const response = await ApiService.post<CreateVnpayPaymentResponse>(
        `/bookings/${bookingId}/payment/vnpay`,
        {}
      );
      
      console.log('‚úÖ T·∫°o URL thanh to√°n VNPay th√†nh c√¥ng:', response);
      return response;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o URL thanh to√°n VNPay:', error);
      throw error;
    }
  }

  /**
   * L·∫•y tr·∫°ng th√°i thanh to√°n c·ªßa booking
   * @param bookingId ID c·ªßa booking
   * @returns Promise<PaymentStatus> Tr·∫°ng th√°i thanh to√°n
   */
  public static async getPaymentStatus(bookingId: string): Promise<PaymentStatus> {
    try {
      console.log('üìä L·∫•y tr·∫°ng th√°i thanh to√°n cho booking:', bookingId);
      
      const response = await ApiService.get<PaymentStatus>(
        `/bookings/${bookingId}/payment/status`
      );
      
      console.log('‚úÖ L·∫•y tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng:', response);
      return response;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i thanh to√°n:', error);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin giao d·ªãch VNPay theo booking ID
   * @param bookingId ID c·ªßa booking
   * @returns Promise<VnpayTransaction> Th√¥ng tin giao d·ªãch
   */
  public static async getTransactionByBooking(bookingId: string): Promise<VnpayTransaction> {
    try {
      console.log('üìã L·∫•y th√¥ng tin giao d·ªãch VNPay cho booking:', bookingId);
      
      const response = await ApiService.get<{status: string, data: VnpayTransaction}>(
        `/vnpay/transaction/${bookingId}`
      );
      
      console.log('‚úÖ L·∫•y th√¥ng tin giao d·ªãch th√†nh c√¥ng:', response);
      return response.data;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin giao d·ªãch:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch giao d·ªãch VNPay c·ªßa user
   * @param userId ID c·ªßa user
   * @param page Trang hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh: 1)
   * @param perPage S·ªë item m·ªói trang (m·∫∑c ƒë·ªãnh: 10)
   * @returns Promise<UserTransactionsResponse> Danh s√°ch giao d·ªãch
   */
  public static async getUserTransactions(
    userId: string, 
    page: number = 1, 
    perPage: number = 10
  ): Promise<UserTransactionsResponse> {
    try {
      console.log('üìã L·∫•y danh s√°ch giao d·ªãch VNPay c·ªßa user:', userId);
      
      const response = await ApiService.get<UserTransactionsResponse>(
        `/vnpay/transactions/user/${userId}?page=${page}&per_page=${perPage}`
      );
      
      console.log('‚úÖ L·∫•y danh s√°ch giao d·ªãch th√†nh c√¥ng:', response);
      return response;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch giao d·ªãch:', error);
      throw error;
    }
  }

  /**
   * Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang thanh to√°n VNPay
   * @param paymentUrl URL thanh to√°n VNPay
   */
  public static redirectToPayment(paymentUrl: string): void {
    console.log('üîÄ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n VNPay:', paymentUrl);
    window.location.href = paymentUrl;
  }

  /**
   * X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n t·ª´ VNPay return URL
   * @param queryParams Query parameters t·ª´ VNPay callback
   * @returns Th√¥ng tin k·∫øt qu·∫£ thanh to√°n
   */
  public static processPaymentResult(queryParams: URLSearchParams) {
    const vnpResponseCode = queryParams.get('vnp_ResponseCode');
    const vnpTxnRef = queryParams.get('vnp_TxnRef');
    const vnpAmount = queryParams.get('vnp_Amount');
    const vnpOrderInfo = queryParams.get('vnp_OrderInfo');
    const vnpTransactionNo = queryParams.get('vnp_TransactionNo');
    const vnpPayDate = queryParams.get('vnp_PayDate');
    const vnpBankCode = queryParams.get('vnp_BankCode');
    const vnpCardType = queryParams.get('vnp_CardType');

    const isSuccess = vnpResponseCode === '00';
    
    return {
      isSuccess,
      responseCode: vnpResponseCode,
      txnRef: vnpTxnRef,
      amount: vnpAmount ? parseInt(vnpAmount) / 100 : 0, // Chuy·ªÉn v·ªÅ VND
      orderInfo: vnpOrderInfo,
      transactionNo: vnpTransactionNo,
      payDate: vnpPayDate,
      bankCode: vnpBankCode,
      cardType: vnpCardType,
      message: this.getResponseMessage(vnpResponseCode || '99')
    };
  }

  /**
   * L·∫•y th√¥ng b√°o t∆∞∆°ng ·ª©ng v·ªõi m√£ ph·∫£n h·ªìi VNPay
   * @param responseCode M√£ ph·∫£n h·ªìi t·ª´ VNPay
   * @returns Th√¥ng b√°o b·∫±ng ti·∫øng Vi·ªát
   */
  public static getResponseMessage(responseCode: string): string {
    const messages: { [key: string]: string } = {
      '00': 'Giao d·ªãch th√†nh c√¥ng',
      '07': 'Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng)',
      '09': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng',
      '10': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn',
      '11': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch',
      '12': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a',
      '13': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP)',
      '24': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch',
      '51': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
      '65': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y',
      '75': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨',
      '79': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
      '99': 'C√°c l·ªói kh√°c (l·ªói c√≤n l·∫°i, kh√¥ng c√≥ trong danh s√°ch m√£ l·ªói ƒë√£ li·ªát k√™)'
    };

    return messages[responseCode] || 'Giao d·ªãch kh√¥ng th√†nh c√¥ng';
  }

  /**
   * ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn VND
   * @param amount S·ªë ti·ªÅn
   * @returns Chu·ªói ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
   */
  public static formatCurrency(amount: number): string {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }

  /**
   * ƒê·ªãnh d·∫°ng ng√†y gi·ªù thanh to√°n VNPay
   * @param vnpPayDate Chu·ªói ng√†y gi·ªù t·ª´ VNPay (format: YYYYMMDDHHmmss)
   * @returns Chu·ªói ng√†y gi·ªù ƒë·ªãnh d·∫°ng
   */
  public static formatPayDate(vnpPayDate: string): string {
    if (!vnpPayDate || vnpPayDate.length !== 14) return '';
    
    const year = vnpPayDate.substring(0, 4);
    const month = vnpPayDate.substring(4, 6);
    const day = vnpPayDate.substring(6, 8);
    const hour = vnpPayDate.substring(8, 10);
    const minute = vnpPayDate.substring(10, 12);
    const second = vnpPayDate.substring(12, 14);
    
    const date = new Date(`${year}-${month}-${day}T${hour}:${minute}:${second}`);
    
    return new Intl.DateTimeFormat('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).format(date);
  }
}

export default VnpayService;

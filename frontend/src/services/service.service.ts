import ApiService from './api';

/**
 * Interface cho d·ªãch v·ª•
 */
export interface Service {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  image?: string;
  duration?: number; // Th·ªùi gian d·ªãch v·ª• (ph√∫t)
  isActive: boolean;
  createdAt?: string;
  updatedAt?: string;
}

/**
 * Interface cho d·ªØ li·ªáu t·∫°o d·ªãch v·ª•
 */
export interface CreateServiceDTO {
  name: string;
  description: string;
  price: number;
  category: string;
  image?: string;
  duration?: number;
  isActive?: boolean;
}

/**
 * Interface cho d·ªØ li·ªáu c·∫≠p nh·∫≠t d·ªãch v·ª•
 */
export interface UpdateServiceDTO {
  name?: string;
  description?: string;
  price?: number;
  category?: string;
  image?: string;
  duration?: number;
  isActive?: boolean;
}

/**
 * Interface cho tham s·ªë l·ªçc danh s√°ch d·ªãch v·ª•
 */
export interface ServiceFilterParams {
  category?: string;
  minPrice?: number;
  maxPrice?: number;
  isActive?: boolean;
  search?: string;
}

/**
 * Interface cho ph·∫£n h·ªìi ph√¢n trang
 */
export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

/**
 * Service qu·∫£n l√Ω d·ªãch v·ª• - S·ª≠ d·ª•ng API th·ª±c t·∫ø
 */
export class ServiceService {
  private static readonly BASE_URL = '/services';
  /**
   * L·∫•y danh s√°ch d·ªãch v·ª•
   * @param params Tham s·ªë l·ªçc
   * @returns Promise<Service[]> Danh s√°ch d·ªãch v·ª•
   */
  public static async getServices(params?: ServiceFilterParams): Promise<Service[]> {
    try {
      const queryParams = new URLSearchParams();
      
      if (params?.category) queryParams.append('category', params.category);
      if (params?.minPrice) queryParams.append('minPrice', params.minPrice.toString());
      if (params?.maxPrice) queryParams.append('maxPrice', params.maxPrice.toString());
      if (params?.isActive !== undefined) queryParams.append('isActive', params.isActive.toString());
      if (params?.search) queryParams.append('search', params.search);
        const url = `${this.BASE_URL}${queryParams.toString() ? '?' + queryParams.toString() : ''}`;
      
      return await ApiService.get<Service[]>(url);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch d·ªãch v·ª• n·ªïi b·∫≠t
   * @param limit S·ªë l∆∞·ª£ng d·ªãch v·ª• n·ªïi b·∫≠t
   * @returns Promise<Service[]> Danh s√°ch d·ªãch v·ª• n·ªïi b·∫≠t
   */
  public static async getFeaturedServices(limit: number = 5): Promise<Service[]> {
    try {
      return await ApiService.get<Service[]>(`${this.BASE_URL}/featured`, {
        params: { limit }
      });
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª• n·ªïi b·∫≠t:', error);
      throw error;
    }
  }

  /**
   * L·∫•y chi ti·∫øt d·ªãch v·ª• theo ID
   * @param id ID c·ªßa d·ªãch v·ª•
   * @returns Promise<Service> Chi ti·∫øt d·ªãch v·ª•
   */
  public static async getServiceById(id: string): Promise<Service> {
    try {
      return await ApiService.get<Service>(`${this.BASE_URL}/${id}`);
    } catch (error) {
      console.error('L·ªói khi l·∫•y chi ti·∫øt d·ªãch v·ª•:', error);
      throw error;
    }
  }

  /**
   * T·∫°o d·ªãch v·ª• m·ªõi (Admin only)
   * @param data D·ªØ li·ªáu d·ªãch v·ª• m·ªõi
   * @returns Promise<Service> D·ªãch v·ª• v·ª´a ƒë∆∞·ª£c t·∫°o
   */
  public static async createService(data: CreateServiceDTO): Promise<Service> {
    try {
      return await ApiService.post<Service>(this.BASE_URL, data);
    } catch (error) {
      console.error('L·ªói khi t·∫°o d·ªãch v·ª•:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t d·ªãch v·ª• (Admin only)
   * @param id ID c·ªßa d·ªãch v·ª•
   * @param data D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @returns Promise<Service> D·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
   */  public static async updateService(id: string, data: UpdateServiceDTO): Promise<Service> {
    try {
      console.log('üîÑ ServiceService.updateService - G·ªçi API PUT:', {
        url: `${this.BASE_URL}/${id}`,
        data: data
      });
      
      const result = await ApiService.put<Service>(`${this.BASE_URL}/${id}`, data);
      
      console.log('üìã ServiceService.updateService - K·∫øt qu·∫£ t·ª´ API:', result);
      console.log('üîç ServiceService.updateService - Ki·ªÉm tra c·∫•u tr√∫c:', {
        hasId: !!result?.id,
        id: result?.id,
        isObject: typeof result === 'object',
        keys: Object.keys(result || {})
      });
      
      return result;
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t d·ªãch v·ª•:', error);
      throw error;
    }
  }

  /**
   * X√≥a d·ªãch v·ª• (Admin only)
   * @param id ID c·ªßa d·ªãch v·ª•
   * @returns Promise<void>
   */  public static async deleteService(id: string): Promise<void> {
    try {
      console.log('üóëÔ∏è ServiceService.deleteService - G·ªçi API DELETE:', {
        url: `${this.BASE_URL}/${id}`,
        id: id
      });
      
      const response = await ApiService.delete(`${this.BASE_URL}/${id}`);
      
      console.log('‚úÖ ServiceService.deleteService - X√≥a th√†nh c√¥ng:', id);
      console.log('üìã Response from delete:', response);
    } catch (error) {
      console.error('‚ùå ServiceService.deleteService - L·ªói:', error);
      
      // Log chi ti·∫øt l·ªói
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as any;
        console.error('üìä Chi ti·∫øt l·ªói API:', {
          status: axiosError.response?.status,
          statusText: axiosError.response?.statusText,
          data: axiosError.response?.data,
          message: axiosError.message
        });
      }
      
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch danh m·ª•c d·ªãch v·ª•
   * @returns Promise<string[]> Danh s√°ch danh m·ª•c
   */
  public static async getCategories(): Promise<string[]> {
    try {
      return await ApiService.get<string[]>(`${this.BASE_URL}/categories`);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch danh m·ª•c:', error);
      throw error;
    }
  }

  /**
   * T√¨m ki·∫øm d·ªãch v·ª•
   * @param query T·ª´ kh√≥a t√¨m ki·∫øm
   * @param filters B·ªô l·ªçc b·ªï sung
   * @returns Promise<Service[]> K·∫øt qu·∫£ t√¨m ki·∫øm
   */
  public static async searchServices(query: string, filters?: ServiceFilterParams): Promise<Service[]> {
    try {
      const params = { search: query, ...filters };
      return await this.getServices(params);
    } catch (error) {
      console.error('L·ªói khi t√¨m ki·∫øm d·ªãch v·ª•:', error);
      throw error;
    }
  }

  /**
   * L·∫•y d·ªãch v·ª• theo danh m·ª•c
   * @param category Danh m·ª•c d·ªãch v·ª•
   * @param limit S·ªë l∆∞·ª£ng gi·ªõi h·∫°n
   * @returns Promise<Service[]> Danh s√°ch d·ªãch v·ª• trong danh m·ª•c
   */
  public static async getServicesByCategory(category: string, limit?: number): Promise<Service[]> {
    try {
      const params: ServiceFilterParams = { category, isActive: true };
      const services = await this.getServices(params);
      
      if (limit && limit > 0) {
        return services.slice(0, limit);
      }
      
      return services;
    } catch (error) {
      console.error('L·ªói khi l·∫•y d·ªãch v·ª• theo danh m·ª•c:', error);
      throw error;
    }
  }
  /**
   * Ki·ªÉm tra d·ªãch v·ª• c√≥ t·ªìn t·∫°i kh√¥ng
   * @param id ID c·ªßa d·ªãch v·ª•
   * @returns Promise<boolean> true n·∫øu d·ªãch v·ª• t·ªìn t·∫°i
   */
  public static async serviceExists(id: string): Promise<boolean> {
    try {
      await this.getServiceById(id);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i d·ªãch v·ª• (Admin only)
   * @param id ID c·ªßa d·ªãch v·ª•
   * @param isActive Tr·∫°ng th√°i m·ªõi
   * @returns Promise<Service> D·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
   */
  public static async updateServiceStatus(id: string, isActive: boolean): Promise<Service> {
    try {
      return await this.updateService(id, { isActive });
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i d·ªãch v·ª•:', error);
      throw error;
    }
  }

  /**
   * Upload ·∫£nh cho d·ªãch v·ª• (Admin only)
   * @param serviceId ID c·ªßa d·ªãch v·ª•
   * @param file File ·∫£nh
   * @returns Promise<string> URL c·ªßa ·∫£nh ƒë√£ upload
   */
  public static async uploadServiceImage(serviceId: string, file: File): Promise<string> {
    try {
      const formData = new FormData();
      formData.append('image', file);
      
      const response = await fetch(`${this.BASE_URL}/${serviceId}/upload-image`, {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error('Failed to upload image');
      }
      
      const result = await response.json();
      return result.imageUrl;
    } catch (error) {
      console.error('L·ªói khi upload ·∫£nh d·ªãch v·ª•:', error);
      throw error;
    }
  }
}

export default ServiceService;

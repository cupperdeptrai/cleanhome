import { useState, useEffect } from 'react';
import { 
  getCities, 
  getDistricts, 
  getWards, 
  formatFullAddress,
  getAddressNames
} from '../../data/vietnamAddress';

/**
 * Component ch·ªçn ƒë·ªãa ch·ªâ theo c·∫•u tr√∫c Vi·ªát Nam
 * H·ªó tr·ª£ Th√†nh ph·ªë ‚Üí Qu·∫≠n/Huy·ªán ‚Üí Ph∆∞·ªùng/X√£ + ƒê·ªãa ch·ªâ chi ti·∫øt
 * 
 * Features:
 * - T·∫£i d·ªØ li·ªáu t·ª´ file ri√™ng, d·ªÖ b·∫£o tr√¨  
 * - Cascading dropdown (ch·ªçn th√†nh ph·ªë ‚Üí qu·∫≠n ‚Üí ph∆∞·ªùng)
 * - Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt: s·ªë nh√†, ng√°ch, ng√µ, ƒë∆∞·ªùng
 * - Validation ƒë·∫ßy ƒë·ªß th√¥ng tin
 * - Auto-format ƒë·ªãa ch·ªâ cu·ªëi theo ƒë·ªãnh d·∫°ng chu·∫©n VN
 * - TypeScript support ƒë·∫ßy ƒë·ªß
 */

// Interface cho d·ªØ li·ªáu ƒë·ªãa ch·ªâ component - EXPORT ƒë·ªÉ d√πng ·ªü component kh√°c
export interface AddressValue {
  /** ID th√†nh ph·ªë */
  city: string;
  /** ID qu·∫≠n/huy·ªán */  
  district: string;
  /** ID ph∆∞·ªùng/x√£ */
  ward: string;
  /** S·ªë nh√† (v√≠ d·ª•: s·ªë 1, s·ªë 123) */
  houseNumber: string;
  /** Ng√°ch (t√πy ch·ªçn, v√≠ d·ª•: ng√°ch 6) */
  alley?: string;
  /** Ng√µ (t√πy ch·ªçn, v√≠ d·ª•: ng√µ 1) */
  lane?: string;
  /** T√™n ƒë∆∞·ªùng/ph·ªë */
  street: string;
  /** ƒê·ªãa ch·ªâ c·ª• th·ªÉ kh√°c (t√≤a nh√†, t·∫ßng...) */
  specificAddress?: string;
}

interface AddressSelectorProps {
  /** Gi√° tr·ªã ƒë·ªãa ch·ªâ hi·ªán t·∫°i */
  value: AddressValue;
  /** Callback khi ƒë·ªãa ch·ªâ thay ƒë·ªïi */
  onChange: (address: AddressValue) => void;
  /** Th√¥ng b√°o l·ªói hi·ªÉn th·ªã */
  error?: string;
  /** C√≥ disable component kh√¥ng */
  disabled?: boolean;
}

/**
 * Component AddressSelector ch√≠nh
 * T·ªëi ∆∞u v·ªõi d·ªØ li·ªáu t·ª´ file ri√™ng v√† comment ti·∫øng Vi·ªát ƒë·∫ßy ƒë·ªß
 */
const AddressSelector = ({ 
  value, 
  onChange, 
  error, 
  disabled = false
}: AddressSelectorProps) => {
  
  // ========== STATE MANAGEMENT ==========
  
  /** State local cho c√°c gi√° tr·ªã ƒë√£ ch·ªçn */
  const [selectedCity, setSelectedCity] = useState(value.city);
  const [selectedDistrict, setSelectedDistrict] = useState(value.district);
  const [selectedWard, setSelectedWard] = useState(value.ward);
  const [houseNumber, setHouseNumber] = useState(value.houseNumber || '');
  const [alley, setAlley] = useState(value.alley || '');
  const [lane, setLane] = useState(value.lane || '');
  const [street, setStreet] = useState(value.street || '');
  const [specificAddress, setSpecificAddress] = useState(value.specificAddress || '');

  /** State cho d·ªØ li·ªáu dropdown options - t·∫£i t·ª´ file vietnamAddress.ts */
  const [cities] = useState(() => getCities()); // T·∫£i 1 l·∫ßn khi component mount
  const [districts, setDistricts] = useState<Array<{id: string, name: string}>>([]);
  const [wards, setWards] = useState<Array<{id: string, name: string}>>([]);

  // ========== EFFECT HANDLERS ==========
  
  /**
   * Effect: ƒê·ªìng b·ªô state local v·ªõi props value
   * Ch·∫°y khi value prop thay ƒë·ªïi t·ª´ b√™n ngo√†i component
   */
  useEffect(() => {
    setSelectedCity(value.city);
    setSelectedDistrict(value.district);
    setSelectedWard(value.ward);
    setHouseNumber(value.houseNumber || '');
    setAlley(value.alley || '');
    setLane(value.lane || '');
    setStreet(value.street || '');
    setSpecificAddress(value.specificAddress || '');
  }, [value]);

  /**
   * Effect: T·∫£i danh s√°ch qu·∫≠n/huy·ªán khi th√†nh ph·ªë thay ƒë·ªïi
   * S·ª≠ d·ª•ng cascading logic - reset c√°c c·∫•p d∆∞·ªõi khi c·∫•p tr√™n thay ƒë·ªïi
   */
  useEffect(() => {
    if (selectedCity) {
      const districtOptions = getDistricts(selectedCity);
      setDistricts(districtOptions);
      
      // Reset qu·∫≠n/huy·ªán v√† ph∆∞·ªùng/x√£ n·∫øu th√†nh ph·ªë thay ƒë·ªïi v√† kh√¥ng h·ª£p l·ªá
      if (selectedDistrict && !districtOptions.find(d => d.id === selectedDistrict)) {
        setSelectedDistrict('');
        setSelectedWard('');
        setWards([]);
      }
    } else {
      // N·∫øu kh√¥ng c√≥ th√†nh ph·ªë, x√≥a t·∫•t c·∫£ options c·∫•p d∆∞·ªõi
      setDistricts([]);
      setWards([]);
    }
  }, [selectedCity, selectedDistrict]);

  /**
   * Effect: T·∫£i danh s√°ch ph∆∞·ªùng/x√£ khi qu·∫≠n/huy·ªán thay ƒë·ªïi
   */
  useEffect(() => {
    if (selectedCity && selectedDistrict) {
      const wardOptions = getWards(selectedCity, selectedDistrict);
      setWards(wardOptions);
      
      // Reset ph∆∞·ªùng/x√£ n·∫øu qu·∫≠n thay ƒë·ªïi v√† kh√¥ng h·ª£p l·ªá
      if (selectedWard && !wardOptions.find(w => w.id === selectedWard)) {
        setSelectedWard('');
      }
    } else {
      setWards([]);
    }
  }, [selectedCity, selectedDistrict, selectedWard]);

  // ========== EVENT HANDLERS ==========

  /**
   * T·∫°o object AddressValue m·ªõi v·ªõi c√°c gi√° tr·ªã hi·ªán t·∫°i
   */
  const createNewAddress = (overrides: Partial<AddressValue> = {}): AddressValue => {
    return {
      city: selectedCity,
      district: selectedDistrict,
      ward: selectedWard,
      houseNumber,
      alley: alley || undefined,
      lane: lane || undefined,
      street,
      specificAddress: specificAddress || undefined,
      ...overrides
    };
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi th√†nh ph·ªë
   * Reset t·∫•t c·∫£ c·∫•p d∆∞·ªõi v√† g·ªçi onChange callback
   */
  const handleCityChange = (cityId: string) => {
    setSelectedCity(cityId);
    setSelectedDistrict('');
    setSelectedWard('');
    
    const newAddress = createNewAddress({
      city: cityId,
      district: '',
      ward: ''
    });
    
    onChange(newAddress);
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi qu·∫≠n/huy·ªán
   * Reset ph∆∞·ªùng/x√£ v√† g·ªçi onChange callback
   */
  const handleDistrictChange = (districtId: string) => {
    setSelectedDistrict(districtId);
    setSelectedWard('');
    
    const newAddress = createNewAddress({
      district: districtId,
      ward: ''
    });
    
    onChange(newAddress);
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi ph∆∞·ªùng/x√£
   */
  const handleWardChange = (wardId: string) => {
    setSelectedWard(wardId);
    
    const newAddress = createNewAddress({
      ward: wardId
    });
    
    onChange(newAddress);
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi s·ªë nh√†
   */
  const handleHouseNumberChange = (value: string) => {
    setHouseNumber(value);
    
    const newAddress = createNewAddress({
      houseNumber: value
    });
    
    onChange(newAddress);
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi ng√°ch
   */
  const handleAlleyChange = (value: string) => {
    setAlley(value);
    
    const newAddress = createNewAddress({
      alley: value || undefined
    });
    
    onChange(newAddress);
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi ng√µ
   */
  const handleLaneChange = (value: string) => {
    setLane(value);
    
    const newAddress = createNewAddress({
      lane: value || undefined
    });
    
    onChange(newAddress);
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi t√™n ƒë∆∞·ªùng
   */
  const handleStreetChange = (value: string) => {
    setStreet(value);
    
    const newAddress = createNewAddress({
      street: value
    });
    
    onChange(newAddress);
  };

  /**
   * X·ª≠ l√Ω khi thay ƒë·ªïi ƒë·ªãa ch·ªâ c·ª• th·ªÉ
   */
  const handleSpecificAddressChange = (value: string) => {
    setSpecificAddress(value);
    
    const newAddress = createNewAddress({
      specificAddress: value || undefined
    });
    
    onChange(newAddress);
  };

  // ========== UTILITY FUNCTIONS ==========

  /**
   * T·∫°o preview ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß cho user xem tr∆∞·ªõc
   * Ch·ªâ hi·ªÉn th·ªã khi ƒë√£ ch·ªçn ƒë·ªß th√†nh ph·ªë, qu·∫≠n, ph∆∞·ªùng
   */
  const getAddressPreview = (): string => {
    if (!selectedCity || !selectedDistrict || !selectedWard || !houseNumber || !street) {
      return '';
    }
    
    // L·∫•y t√™n ƒë·∫ßy ƒë·ªß t·ª´ ID
    const { cityName, districtName, wardName } = getAddressNames(
      selectedCity, 
      selectedDistrict, 
      selectedWard
    );
    
    // Format th√†nh chu·ªói ƒë·ªãa ch·ªâ ho√†n ch·ªânh
    return formatFullAddress(
      houseNumber,
      street,
      wardName, 
      districtName, 
      cityName,
      alley || undefined,
      lane || undefined,
      specificAddress || undefined
    );
  };

  // ========== RENDER ==========

  return (
    <div className="space-y-4">
      {/* Ti√™u ƒë·ªÅ section ƒë·ªãa ch·ªâ */}
      <div className="text-sm font-medium text-gray-700 mb-2">
        üìç Th√¥ng tin ƒë·ªãa ch·ªâ *
      </div>

      {/* Grid layout cho c√°c tr∆∞·ªùng ƒë·ªãa ch·ªâ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Dropdown ch·ªçn th√†nh ph·ªë/t·ªânh */}
        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Th√†nh ph·ªë/T·ªânh *
          </label>
          <select
            value={selectedCity}
            onChange={(e) => handleCityChange(e.target.value)}
            disabled={disabled}
            aria-label="Ch·ªçn th√†nh ph·ªë"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
          >
            <option value="">-- Ch·ªçn th√†nh ph·ªë/t·ªânh --</option>
            {cities.map(city => (
              <option key={city.id} value={city.id}>
                {city.name}
              </option>
            ))}
          </select>
        </div>

        {/* Dropdown ch·ªçn qu·∫≠n/huy·ªán */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Qu·∫≠n/Huy·ªán *
          </label>
          <select
            value={selectedDistrict}
            onChange={(e) => handleDistrictChange(e.target.value)}
            disabled={disabled || !selectedCity}
            aria-label="Ch·ªçn qu·∫≠n/huy·ªán"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
          >
            <option value="">-- Ch·ªçn qu·∫≠n/huy·ªán --</option>
            {districts.map(district => (
              <option key={district.id} value={district.id}>
                {district.name}
              </option>
            ))}
          </select>
        </div>

        {/* Dropdown ch·ªçn ph∆∞·ªùng/x√£ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Ph∆∞·ªùng/X√£ *
          </label>
          <select
            value={selectedWard}
            onChange={(e) => handleWardChange(e.target.value)}
            disabled={disabled || !selectedDistrict}
            aria-label="Ch·ªçn ph∆∞·ªùng/x√£"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
          >
            <option value="">-- Ch·ªçn ph∆∞·ªùng/x√£ --</option>
            {wards.map(ward => (
              <option key={ward.id} value={ward.id}>
                {ward.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Th√¥ng tin ƒë·ªãa ch·ªâ chi ti·∫øt */}
      <div className="space-y-3">
        <div className="text-sm font-medium text-gray-700">
          üè† ƒê·ªãa ch·ªâ chi ti·∫øt *
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          {/* S·ªë nh√† */}
          <div>
            <label className="block text-xs font-medium text-gray-600 mb-1">
              S·ªë nh√† *
            </label>
            <input
              type="text"
              value={houseNumber}
              onChange={(e) => handleHouseNumberChange(e.target.value)}
              placeholder="VD: 123, s·ªë 1"
              disabled={disabled}
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
          </div>

          {/* Ng√°ch (t√πy ch·ªçn) */}
          <div>
            <label className="block text-xs font-medium text-gray-600 mb-1">
              Ng√°ch (t√πy ch·ªçn)
            </label>
            <input
              type="text"
              value={alley}
              onChange={(e) => handleAlleyChange(e.target.value)}
              placeholder="VD: 6, 12"
              disabled={disabled}
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
          </div>

          {/* Ng√µ (t√πy ch·ªçn) */}
          <div>
            <label className="block text-xs font-medium text-gray-600 mb-1">
              Ng√µ (t√πy ch·ªçn)
            </label>
            <input
              type="text"
              value={lane}
              onChange={(e) => handleLaneChange(e.target.value)}
              placeholder="VD: 1, 25"
              disabled={disabled}
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
          </div>
        </div>

        {/* T√™n ƒë∆∞·ªùng */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            T√™n ƒë∆∞·ªùng/ph·ªë *
          </label>
          <input
            type="text"
            value={street}
            onChange={(e) => handleStreetChange(e.target.value)}
            placeholder="VD: ƒê∆∞·ªùng Nguy·ªÖn VƒÉn C·ª´, Ph·ªë H√†ng M√£"
            disabled={disabled}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
          />
        </div>

        {/* ƒê·ªãa ch·ªâ c·ª• th·ªÉ kh√°c */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Th√¥ng tin b·ªï sung (t√πy ch·ªçn)
          </label>
          <input
            type="text"
            value={specificAddress}
            onChange={(e) => handleSpecificAddressChange(e.target.value)}
            placeholder="VD: Chung c∆∞ ABC, T·∫ßng 5, T√≤a nh√† XYZ"
            disabled={disabled}
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
          />
          <div className="text-xs text-gray-500 mt-1">
            üí° Th√¥ng tin b·ªï sung nh∆∞ t√™n chung c∆∞, t√≤a nh√†, t·∫ßng l·∫ßu...
          </div>
        </div>
      </div>

      {/* Preview ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß - hi·ªÉn th·ªã khi ƒë√£ ch·ªçn ƒë·ªß th√¥ng tin */}
      {getAddressPreview() && (
        <div className="bg-blue-50 border border-blue-200 rounded-md p-3">
          <div className="text-sm font-medium text-blue-800 mb-1">
            üìç ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß:
          </div>
          <div className="text-sm text-blue-700 font-medium">
            {getAddressPreview()}
          </div>
        </div>
      )}

      {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥ */}
      {error && (
        <div className="text-sm text-red-600 font-medium">
          ‚ö†Ô∏è {error}
        </div>
      )}
    </div>
  );
};

export default AddressSelector;

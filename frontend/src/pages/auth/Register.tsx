import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import AuthService from '../../services/auth.service';

const Register: React.FC = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [countdown, setCountdown] = useState(3);
  const [shouldRedirect, setShouldRedirect] = useState(false); // Flag ƒë·ªÉ ƒëi·ªÅu khi·ªÉn redirect
  
  const navigate = useNavigate();
  
  // Effect ƒë·ªÉ x·ª≠ l√Ω ƒë·∫øm ng∆∞·ª£c v√† redirect khi ƒëƒÉng k√Ω th√†nh c√¥ng
  // T√°ch ri√™ng logic redirect ƒë·ªÉ tr√°nh state update conflicts
  useEffect(() => {
    let timer: NodeJS.Timeout;
    
    if (success && !shouldRedirect) {
      timer = setInterval(() => {
        setCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(timer);
            setShouldRedirect(true); // Set flag thay v√¨ navigate tr·ª±c ti·∫øp
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [success, shouldRedirect]);
  
  // Effect ri√™ng ƒë·ªÉ x·ª≠ l√Ω redirect khi shouldRedirect = true
  // ƒêi·ªÅu n√†y tr√°nh ƒë∆∞·ª£c l·ªói state update trong render cycle
  useEffect(() => {
    if (shouldRedirect) {
      const redirectTimer = setTimeout(() => {
        navigate('/login');
      }, 100); // Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o render ho√†n t·∫•t
      
      return () => clearTimeout(redirectTimer);
    }
  }, [shouldRedirect, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    // Validation c∆° b·∫£n
    if (!name.trim()) {
      setError('Vui l√≤ng nh·∫≠p h·ªç t√™n');
      return;
    }
    
    if (!email.trim()) {
      setError('Vui l√≤ng nh·∫≠p email');
      return;
    }
    
    if (!phone.trim()) {
      setError('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i');
      return;
    }
    
    if (!/^0[3-9]\d{8}$/.test(phone.replace(/\s+/g, ''))) {
      setError('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ ƒë·ªãnh d·∫°ng 10 ch·ªØ s·ªë b·∫Øt ƒë·∫ßu b·∫±ng 0 (v√≠ d·ª•: 0912345678)');
      return;
    }
    
    // Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n
    if (password !== confirmPassword) {
      setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
      return;
    }
    
    // Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
    if (password.length < 6) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      return;
    }
    
    setIsLoading(true);
    
    try {
      console.log('üöÄ ƒêang g·ª≠i y√™u c·∫ßu ƒëƒÉng k√Ω v·ªõi:', { 
        name: name.trim(), 
        email: email.trim().toLowerCase(),
        phone: phone.trim(),
        password: '***' 
      });
      
      // S·ª≠ d·ª•ng AuthService ƒë·ªÉ ƒëƒÉng k√Ω
      const response = await AuthService.register({
        name: name.trim(),
        email: email.trim().toLowerCase(),
        phone: phone.trim() || undefined, // Ch·ªâ g·ª≠i phone n·∫øu c√≥ nh·∫≠p
        password
      });
      
      console.log('üì• Ph·∫£n h·ªìi t·ª´ server:', response);
      
      // Ki·ªÉm tra response th√†nh c√¥ng
      const isSuccess = response.status === 'success' || 
                       response.message === 'User registered successfully' || 
                       response.user;
      
      if (isSuccess) {
        console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!');
        
        // L∆∞u th√¥ng tin x√°c th·ª±c v√†o localStorage n·∫øu c√≥
        if (response.token && response.user) {
          localStorage.setItem('token', response.token);
          localStorage.setItem('user', JSON.stringify(response.user));
          console.log('üíæ ƒê√£ l∆∞u token v√† th√¥ng tin user v√†o localStorage');
        }
        
        // Reset form ƒë·ªÉ tr√°nh submit l·∫°i
        setName('');
        setEmail('');
        setPassword('');
        setConfirmPassword('');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v√† b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
        setSuccess('üéâ B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng t√†i kho·∫£n!');
        setCountdown(3);
        setShouldRedirect(false); // Reset redirect flag
        
      } else {
        // Backend tr·∫£ v·ªÅ l·ªói trong response
        console.warn('‚ö†Ô∏è ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng:', response.message);
        setError(response.message || 'ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (err) {
      console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', err);
      
      if (axios.isAxiosError(err)) {
        if (err.response) {
          // Server ph·∫£n h·ªìi v·ªõi status code l·ªói
          const responseData = err.response.data;
          console.error('L·ªói t·ª´ server:', responseData);
          
          if (responseData.message) {
            setError(responseData.message);
          } else if (responseData.details && Array.isArray(responseData.details)) {
            setError(responseData.details.join(', '));
          } else {
            setError('ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.');
          }
        } else if (err.code === 'ERR_NETWORK') {
          // L·ªói k·∫øt n·ªëi m·∫°ng
          console.error('L·ªói k·∫øt n·ªëi m·∫°ng');
          setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra:' +
                   '\n- K·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n' );
        } else if (err.code === 'ECONNREFUSED') {
          // M√°y ch·ªß t·ª´ ch·ªëi k·∫øt n·ªëi
          setError('M√°y ch·ªß backend kh√¥ng ph·∫£n h·ªìi.');
        } else {
          // L·ªói kh√°c t·ª´ axios
          setError(`L·ªói k·∫øt n·ªëi: ${err.message}`);
        }
      } else {
        // L·ªói kh√¥ng ph·∫£i t·ª´ axios
        setError('ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto">
      <div className="bg-white rounded-lg shadow-md p-8">
        <h1 className="text-2xl font-bold text-center mb-6">ƒêƒÉng k√Ω t√†i kho·∫£n</h1>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            {success} Chuy·ªÉn h∆∞·ªõng sau {countdown} gi√¢y...
          </div>
        )}
        
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="name" className="block text-gray-700 font-medium mb-2">
              H·ªç t√™n
            </label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="email" className="block text-gray-700 font-medium mb-2">
              Email
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="phone" className="block text-gray-700 font-medium mb-2">
              S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span>
            </label>
            <input
              type="tel"
              id="phone"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              placeholder="V√≠ d·ª•: 0912345678"
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
            <p className="text-xs text-gray-500 mt-1">
              S·ªë ƒëi·ªán tho·∫°i d√πng ƒë·ªÉ kh√¥i ph·ª•c m·∫≠t kh·∫©u khi c·∫ßn thi·∫øt
            </p>
          </div>
          
          <div className="mb-4">
            <label htmlFor="password" className="block text-gray-700 font-medium mb-2">
              M·∫≠t kh·∫©u
            </label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
              minLength={6}
            />
          </div>
          
          <div className="mb-6">
            <label htmlFor="confirmPassword" className="block text-gray-700 font-medium mb-2">
              X√°c nh·∫≠n m·∫≠t kh·∫©u
            </label>
            <input
              type="password"
              id="confirmPassword"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
              minLength={6}
            />
          </div>
          
          <button
            type="submit"
            disabled={isLoading}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50"
          >
            {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒêƒÉng k√Ω'}
          </button>
        </form>
        
        <div className="mt-6 border-t pt-6 text-center">
          <p>
            ƒê√£ c√≥ t√†i kho·∫£n?{' '}
            <Link to="/login" className="text-blue-600 hover:text-blue-800 font-medium">
              ƒêƒÉng nh·∫≠p
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;

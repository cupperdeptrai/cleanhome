import { useState, FormEvent, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useServiceContext } from '../context/ServiceContext';
import Card from '../components/UI/Card';
import Button from '../components/UI/Button';
import AddressSelector, { AddressValue } from '../components/forms/AddressSelector';
import BookingService from '../services/booking.service';
import PromotionService, { BestPromotionResponse } from '../services/promotion.service';
import { formatFullAddress, getAddressNames } from '../data/vietnamAddress';
import { CreateBookingData, BookingCreationResponse } from '../types'; // Import c√°c ki·ªÉu d·ªØ li·ªáu m·ªõi

/**
 * Component trang ƒë·∫∑t l·ªãch d·ªãch v·ª•
 * Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn d·ªãch v·ª•, th·ªùi gian v√† ƒë·∫∑t l·ªãch v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n
 */

const BookingForm = () => {
  const { user } = useAuth();
  const { services } = useServiceContext();
  const navigate = useNavigate();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const serviceIdFromUrl = queryParams.get('service');
  
  // L·∫•y danh s√°ch d·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông
  const activeServices = services.filter(service => service.isActive);
  
  const [selectedService, setSelectedService] = useState<string>(serviceIdFromUrl || '');
  const [date, setDate] = useState<string>('');
  const [time, setTime] = useState<string>('');
  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'vnpay'>('cash'); // Th√™m state cho ph∆∞∆°ng th·ª©c thanh to√°n
  const [address, setAddress] = useState<AddressValue>({
    city: '',
    district: '',
    ward: '',
    houseNumber: '',
    alley: '',
    lane: '',
    street: '',
    specificAddress: ''
  });
  const [notes, setNotes] = useState<string>('');
  const [formErrors, setFormErrors] = useState<{
    service?: string;
    date?: string;
    time?: string;
    address?: string;
  }>({});
  const [bookingSuccess, setBookingSuccess] = useState<boolean>(false);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  
  // State cho khuy·∫øn m√£i t·ª± ƒë·ªông
  const [bestPromotion, setBestPromotion] = useState<BestPromotionResponse['promotion']>(null);
  const [promotionLoading, setPromotionLoading] = useState<boolean>(false);
  
  // L·∫•y th√¥ng tin d·ªãch v·ª• ƒë√£ ch·ªçn
  const selectedServiceDetails = activeServices.find(service => service.id === selectedService);
  
  // T√≠nh t·ªïng ti·ªÅn (tr∆∞·ªõc gi·∫£m gi√°)
  const originalPrice = selectedServiceDetails ? selectedServiceDetails.price : 0;
  
  // T√≠nh gi√° cu·ªëi c√πng (sau gi·∫£m gi√°)
  const finalPrice = bestPromotion ? bestPromotion.finalAmount : originalPrice;
  const discountAmount = originalPrice - finalPrice;
  
  // Format gi√° ti·ªÅn
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(price);
  };
  
  // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
  useEffect(() => {
    if (!user) {
      navigate('/login?redirect=booking');
    }
  }, [user, navigate]);

  // Function t√¨m khuy·∫øn m√£i t·ªët nh·∫•t cho user
  const findBestPromotion = useCallback(async () => {
    if (!user?.id || originalPrice <= 0) return;
    
    try {
      setPromotionLoading(true);
      const result = await PromotionService.getBestPromotionForUser(user.id, originalPrice);
      setBestPromotion(result.promotion);
    } catch (error) {
      console.error('Error finding best promotion:', error);
      setBestPromotion(null);
    } finally {
      setPromotionLoading(false);
    }
  }, [user?.id, originalPrice]);

  // T·ª± ƒë·ªông t√¨m khuy·∫øn m√£i t·ªët nh·∫•t khi gi√° thay ƒë·ªïi
  useEffect(() => {
    if (user?.id && originalPrice > 0) {
      findBestPromotion();
    }
  }, [user?.id, originalPrice, findBestPromotion]);
  
  // Ki·ªÉm tra form h·ª£p l·ªá
  const validateForm = () => {
    const errors: {
      service?: string;
      date?: string;
      time?: string;
      address?: string;
    } = {};
    let isValid = true;
    
    if (!selectedService) {
      errors.service = 'Vui l√≤ng ch·ªçn d·ªãch v·ª•';
      isValid = false;
    }
    
    if (!date) {
      errors.date = 'Vui l√≤ng ch·ªçn ng√†y';
      isValid = false;
    } else {
      // Ki·ªÉm tra ng√†y ƒë∆∞·ª£c ch·ªçn c√≥ h·ª£p l·ªá kh√¥ng (t·ª´ h√¥m nay ƒë·∫øn 30 ng√†y ti·∫øp theo)
      const selectedDate = new Date(date);
      const today = new Date();
      const maxDate = new Date();
      
      // Set gi·ªù v·ªÅ 0 ƒë·ªÉ so s√°nh ch·ªâ ng√†y
      today.setHours(0, 0, 0, 0);
      selectedDate.setHours(0, 0, 0, 0);
      maxDate.setDate(today.getDate() + 30);
      maxDate.setHours(0, 0, 0, 0);
      
      if (selectedDate < today) {
        errors.date = 'Kh√¥ng th·ªÉ ch·ªçn ng√†y trong qu√° kh·ª©';
        isValid = false;
      } else if (selectedDate > maxDate) {
        errors.date = 'Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t l·ªãch trong v√≤ng 30 ng√†y t·ªõi';
        isValid = false;
      }
    }
    
    if (!time) {
      errors.time = 'Vui l√≤ng ch·ªçn gi·ªù';
      isValid = false;
    }
    
    // Ki·ªÉm tra ƒë·ªãa ch·ªâ - c·∫ßn c√≥ ƒë·ªß th√¥ng tin
    if (!address.city || !address.district || !address.ward || !address.houseNumber || !address.street) {
      errors.address = 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªãa ch·ªâ (th√†nh ph·ªë, qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£, s·ªë nh√†, t√™n ƒë∆∞·ªùng)';
      isValid = false;
    }
    
    setFormErrors(errors);
    return isValid;
  };
  
  /**
   * H√†m x·ª≠ l√Ω submit form ƒë·ªÉ t·∫°o booking
   * Validate d·ªØ li·ªáu, g·ªçi API v√† x·ª≠ l√Ω k·∫øt qu·∫£ (chuy·ªÉn h∆∞·ªõng VNPAY ho·∫∑c b√°o th√†nh c√¥ng)
   */
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Ki·ªÉm tra token tr∆∞·ªõc khi g·ª≠i request
      const token = localStorage.getItem('token');
      if (!token) {
        setFormErrors({ service: 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.' });
        navigate('/login?redirect=booking');
        return;
      }
      
      console.log('üí≥ ƒêang t·∫°o booking v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n:', paymentMethod);
      
      // L·∫•y th√¥ng tin d·ªãch v·ª• ƒë√£ ch·ªçn
      const selectedServiceInfo = activeServices.find(s => s.id === selectedService);
      
      // T·∫°o chu·ªói ƒë·ªãa ch·ªâ t·ª´ object ƒë·ªãa ch·ªâ theo ƒë·ªãnh d·∫°ng chu·∫©n
      const { cityName, districtName, wardName } = getAddressNames(
        address.city, 
        address.district, 
        address.ward
      );
      
      const fullAddress = formatFullAddress(
        address.houseNumber,
        address.street,
        wardName,
        districtName, 
        cityName,
        address.alley,
        address.lane,
        address.specificAddress
      );
      
      // D·ªØ li·ªáu booking ƒë·ªÉ g·ª≠i l√™n API, s·ª≠ d·ª•ng ki·ªÉu CreateBookingData
      const bookingData: CreateBookingData = {
        service_id: selectedService,
        booking_date: date,
        booking_time: time,
        customer_address: fullAddress,
        area: 0, // Di·ªán t√≠ch s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ form input n·∫øu c√≥
        quantity: 1, // M·∫∑c ƒë·ªãnh 1 ƒë∆°n v·ªã d·ªãch v·ª•
        notes: notes,
        payment_method: paymentMethod
      };
      
      console.log('üö¢ Selected Service ID:', selectedService);
      console.log('üîç Selected Service Details:', selectedServiceInfo);
      console.log('üìã D·ªØ li·ªáu booking:', bookingData);
      
      // G·ªçi API t·∫°o booking, k·∫øt qu·∫£ c√≥ th·ªÉ ch·ª©a payment_url
      const result: BookingCreationResponse = await BookingService.createBooking(bookingData);
      
      console.log('‚úÖ T·∫°o booking th√†nh c√¥ng:', result);
      
      // N·∫øu thanh to√°n b·∫±ng VNPAY v√† c√≥ payment_url, chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng
      if (paymentMethod === 'vnpay' && result.payment_url) {
        console.log('üí≥ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn VNPAY...');
        window.location.href = result.payment_url;
        return; // D·ª´ng th·ª±c thi ƒë·ªÉ tr√¨nh duy·ªát chuy·ªÉn h∆∞·ªõng
      }

      // Thanh to√°n ti·ªÅn m·∫∑t - ho√†n t·∫•t ƒë·∫∑t l·ªãch
      window.dispatchEvent(new CustomEvent('newBookingCreated', { 
        detail: { booking: result } 
      }));
      
      setBookingSuccess(true);
      
      setTimeout(() => {
        navigate('/bookings?refresh=true');
      }, 3000);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o booking:', error);
      
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as { response?: { status?: number; data?: { message?: string; error?: string } } };
        
        if (axiosError.response?.status === 401) {
          const errorData = axiosError.response.data;
          if (errorData?.error === 'token_expired' || errorData?.message?.includes('expired')) {
            alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p.');
            localStorage.removeItem('token');
            localStorage.removeItem('refresh_token');
            localStorage.removeItem('user');
            navigate('/login?redirect=booking&message=session_expired');
            return;
          }
        }
        
        const errorMessage = axiosError.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch';
        alert(errorMessage);
      } else {
        alert('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // T·∫°o danh s√°ch c√°c khung gi·ªù c√≥ s·∫µn (t·ª´ 8:00 ƒë·∫øn 16:00 theo quy ƒë·ªãnh backend)
  const availableTimeSlots = [
    { value: '08:00', display: '8:00 AM' },
    { value: '09:00', display: '9:00 AM' },
    { value: '10:00', display: '10:00 AM' },
    { value: '11:00', display: '11:00 AM' },
    { value: '13:00', display: '1:00 PM' },
    { value: '14:00', display: '2:00 PM' },
    { value: '15:00', display: '3:00 PM' },
    { value: '16:00', display: '4:00 PM' }
  ];
  
  /**
   * H√†m t·∫°o danh s√°ch ng√†y t·ª´ h√¥m nay ƒë·∫øn 30 ng√†y ti·∫øp theo
   * Bao g·ªìm c·∫£ ng√†y hi·ªán t·∫°i v√† format ƒë·∫πp ƒë·ªÉ hi·ªÉn th·ªã
   */
  const getAvailableDates = () => {
    const dates = [];
    const today = new Date();
    
    // Th√™m t·ª´ ng√†y hi·ªán t·∫°i (i = 0) ƒë·∫øn 30 ng√†y ti·∫øp theo
    for (let i = 0; i <= 30; i++) {
      const nextDate = new Date(today);
      nextDate.setDate(today.getDate() + i);
      
      // Format ng√†y ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
      const dateValue = nextDate.toISOString().split('T')[0];
      const dayNames = ['Ch·ªß nh·∫≠t', 'Th·ª© hai', 'Th·ª© ba', 'Th·ª© t∆∞', 'Th·ª© nƒÉm', 'Th·ª© s√°u', 'Th·ª© b·∫£y'];
      const dayName = dayNames[nextDate.getDay()];
      const formattedDate = `${nextDate.getDate()}/${nextDate.getMonth() + 1}/${nextDate.getFullYear()}`;
      
      let displayText = `${dayName}, ${formattedDate}`;
      if (i === 0) {
        displayText = `H√¥m nay, ${formattedDate}`;
      } else if (i === 1) {
        displayText = `Ng√†y mai, ${formattedDate}`;
      }
      
      dates.push({
        value: dateValue,
        display: displayText
      });
    }
    
    return dates;
  };
  
  const availableDates = getAvailableDates();
  
  return (
    <>
      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">ƒê·∫∑t l·ªãch d·ªãch v·ª•</h1>
          
          {bookingSuccess ? (
            <Card className="p-6">
              <div className="text-center">
                <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                  <svg className="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <h3 className="mt-3 text-lg font-medium text-gray-900">ƒê·∫∑t l·ªãch th√†nh c√¥ng!</h3>
                <p className="mt-2 text-sm text-gray-500">
                  C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. ƒê∆°n ƒë·∫∑t l·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.
                  {paymentMethod === 'cash' && ' Ch√∫ng t√¥i s·∫Ω li√™n h·ªá ƒë·ªÉ x√°c nh·∫≠n trong th·ªùi gian s·ªõm nh·∫•t.'}
                </p>
                <p className="mt-1 text-sm text-gray-500">
                  B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang qu·∫£n l√Ω ƒë∆°n h√†ng sau 3 gi√¢y.
                </p>
                <div className="mt-5">
                  <Button
                    onClick={() => navigate('/bookings?refresh=true')}
                  >
                    Xem ƒë∆°n h√†ng c·ªßa t√¥i
                  </Button>
                </div>
              </div>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="md:col-span-2">
                <Card className="p-6">
                  <form onSubmit={handleSubmit} className="space-y-6">
                    {/* Dropdown ch·ªçn d·ªãch v·ª• */}
                    <div>
                      <label htmlFor="service" className="block text-sm font-medium text-gray-700 mb-2">
                        üè† Ch·ªçn d·ªãch v·ª•
                      </label>
                      <select
                        id="service"
                        name="service"
                        value={selectedService}
                        onChange={(e) => setSelectedService(e.target.value)}
                        className={`mt-1 block w-full pl-4 pr-10 py-3 text-base bg-white border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                          formErrors.service ? 'border-red-500 ring-red-500' : 'border-gray-300'
                        }`}
                      >
                        <option value="" className="text-gray-500">-- Ch·ªçn m·ªôt d·ªãch v·ª• --</option>
                        {activeServices.map(service => (
                          <option key={service.id} value={service.id} className="py-2">
                            {service.name} - {formatPrice(service.price)}
                          </option>
                        ))}
                      </select>
                      {formErrors.service && (
                        <p className="mt-2 text-sm text-red-600 flex items-center">
                          <span className="mr-1">‚ö†Ô∏è</span>
                          {formErrors.service}
                        </p>
                      )}
                    </div>

                    {/* Ph·∫ßn ch·ªçn ng√†y v√† gi·ªù v·ªõi giao di·ªán c·∫£i thi·ªán */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {/* Dropdown ch·ªçn ng√†y */}
                      <div>
                        <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-2">
                          üìÖ Ch·ªçn ng√†y th·ª±c hi·ªán
                        </label>
                        <select
                          id="date"
                          name="date"
                          value={date}
                          onChange={(e) => setDate(e.target.value)}
                          className={`mt-1 block w-full pl-4 pr-10 py-3 text-base bg-white border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                            formErrors.date ? 'border-red-500 ring-red-500' : 'border-gray-300'
                          }`}
                        >
                          <option value="" className="text-gray-500">-- Ch·ªçn ng√†y --</option>
                          {availableDates.map(d => (
                            <option key={d.value} value={d.value} className="py-2">
                              {d.display}
                            </option>
                          ))}
                        </select>
                        {formErrors.date && (
                          <p className="mt-2 text-sm text-red-600 flex items-center">
                            <span className="mr-1">‚ö†Ô∏è</span>
                            {formErrors.date}
                          </p>
                        )}
                      </div>

                      {/* Dropdown ch·ªçn gi·ªù */}
                      <div>
                        <label htmlFor="time" className="block text-sm font-medium text-gray-700 mb-2">
                          üïê Ch·ªçn gi·ªù th·ª±c hi·ªán
                        </label>
                        <select
                          id="time"
                          name="time"
                          value={time}
                          onChange={(e) => setTime(e.target.value)}
                          className={`mt-1 block w-full pl-4 pr-10 py-3 text-base bg-white border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors ${
                            formErrors.time ? 'border-red-500 ring-red-500' : 'border-gray-300'
                          }`}
                        >
                          <option value="" className="text-gray-500">-- Ch·ªçn gi·ªù --</option>
                          {availableTimeSlots.map(slot => (
                            <option key={slot.value} value={slot.value} className="py-2">
                              {slot.display}
                            </option>
                          ))}
                        </select>
                        {formErrors.time && (
                          <p className="mt-2 text-sm text-red-600 flex items-center">
                            <span className="mr-1">‚ö†Ô∏è</span>
                            {formErrors.time}
                          </p>
                        )}
                        
                        {/* Th√¥ng tin b·ªï sung v·ªÅ gi·ªù l√†m vi·ªác */}
                        <p className="mt-2 text-xs text-gray-500">
                          üí° Gi·ªù l√†m vi·ªác: 8:00 - 17:00. Ch·ªâ nh·∫≠n ƒë·∫∑t l·ªãch ƒë·∫øn 16:00
                        </p>
                      </div>
                    </div>

                    {/* Ph·∫ßn nh·∫≠p ƒë·ªãa ch·ªâ */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        üìç ƒê·ªãa ch·ªâ th·ª±c hi·ªán d·ªãch v·ª•
                      </label>
                      <AddressSelector value={address} onChange={setAddress} />
                      {formErrors.address && (
                        <p className="mt-2 text-sm text-red-600 flex items-center">
                          <span className="mr-1">‚ö†Ô∏è</span>
                          {formErrors.address}
                        </p>
                      )}
                    </div>

                    {/* Ph·∫ßn ghi ch√∫ */}
                    <div>
                      <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-2">
                        üìù Ghi ch√∫ th√™m (t√πy ch·ªçn)
                      </label>
                      <textarea
                        id="notes"
                        name="notes"
                        rows={3}
                        value={notes}
                        onChange={(e) => setNotes(e.target.value)}
                        className="mt-1 block w-full pl-4 pr-4 py-3 text-base bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-none"
                        placeholder="V√≠ d·ª•: Nh√† c√≥ ch√≥ nh·ªè, vui l√≤ng g·ªçi tr∆∞·ªõc khi ƒë·∫øn..."
                      ></textarea>
                      <p className="mt-1 text-xs text-gray-500">
                        üí° H√£y ƒë·ªÉ l·∫°i th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ nh√¢n vi√™n chu·∫©n b·ªã t·ªët nh·∫•t
                      </p>
                    </div>

                    {/* Ph·∫ßn thanh to√°n v·ªõi th√¥ng tin b·ªï sung v·ªÅ VNPAY */}
                    <div className="border-t border-gray-200 pt-6">
                      <h3 className="text-lg font-medium text-gray-900 mb-4">üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n</h3>
                      <fieldset className="mt-4">
                        <legend className="sr-only">Payment method</legend>
                        <div className="space-y-4">
                          {/* Thanh to√°n ti·ªÅn m·∫∑t */}
                          <div className="flex items-center p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                            <input
                              id="cash"
                              name="payment-method"
                              type="radio"
                              value="cash"
                              checked={paymentMethod === 'cash'}
                              onChange={() => setPaymentMethod('cash')}
                              className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
                            />
                            <label htmlFor="cash" className="ml-3 flex-1">
                              <div className="flex items-center">
                                <span className="text-sm font-medium text-gray-700">üíµ Thanh to√°n ti·ªÅn m·∫∑t</span>
                              </div>
                              <p className="text-xs text-gray-500 mt-1">Thanh to√°n tr·ª±c ti·∫øp cho nh√¢n vi√™n khi ho√†n th√†nh d·ªãch v·ª•</p>
                            </label>
                          </div>
                          
                          {/* Thanh to√°n VNPAY */}
                          <div className="flex items-center p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                            <input
                              id="vnpay"
                              name="payment-method"
                              type="radio"
                              value="vnpay"
                              checked={paymentMethod === 'vnpay'}
                              onChange={() => setPaymentMethod('vnpay')}
                              className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
                            />
                            <label htmlFor="vnpay" className="ml-3 flex-1">
                              <div className="flex items-center">
                                <span className="text-sm font-medium text-gray-700">üè¶ Thanh to√°n VNPAY</span>
                              </div>
                              <p className="text-xs text-gray-500 mt-1">Thanh to√°n tr·ª±c tuy·∫øn qua c√°c ng√¢n h√†ng n·ªôi ƒë·ªãa</p>
                            </label>
                          </div>
                        </div>
                      </fieldset>
                    </div>

                    <div className="pt-6">
                      <Button type="submit" className="w-full" disabled={isSubmitting}>
                        {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : `ƒê·∫∑t l·ªãch ngay - ${formatPrice(finalPrice)}`}
                      </Button>
                    </div>
                  </form>
                </Card>
              </div>
              
              <div>
                <Card className="p-6">
                  <h2 className="text-lg font-medium text-gray-900 mb-4">Th√¥ng tin ƒë∆°n h√†ng</h2>
                  
                  {selectedServiceDetails ? (
                    <div>
                      <div className="mb-4">
                        <h3 className="font-medium text-gray-900">{selectedServiceDetails.name}</h3>
                        <p className="text-sm text-gray-500">{selectedServiceDetails.description}</p>
                      </div>
                      
                      <div className="border-t border-gray-200 pt-4">
                        <div className="flex justify-between mb-2">
                          <span className="text-gray-500">Gi√° d·ªãch v·ª•</span>
                          <span className="text-gray-900">{formatPrice(selectedServiceDetails.price)}</span>
                        </div>
                        
                        <div className="flex justify-between mb-2">
                          <span className="text-gray-500">Th·ªùi gian th·ª±c hi·ªán</span>
                          <span className="text-gray-900">
                            {(selectedServiceDetails.duration || 120) >= 60
                              ? `${Math.floor((selectedServiceDetails.duration || 120) / 60)} gi·ªù ${
                                  (selectedServiceDetails.duration || 120) % 60 ? `${(selectedServiceDetails.duration || 120) % 60} ph√∫t` : ''
                                }`
                              : `${selectedServiceDetails.duration || 120} ph√∫t`}
                          </span>
                        </div>
                        
                        <div className="border-t border-gray-200 pt-4 mt-4">
                          {/* Hi·ªÉn th·ªã gi√° g·ªëc */}
                          <div className="flex justify-between mb-2">
                            <span className="text-gray-700">Gi√° d·ªãch v·ª•</span>
                            <span className="text-gray-900">{formatPrice(originalPrice)}</span>
                          </div>
                          
                          {/* Hi·ªÉn th·ªã khuy·∫øn m√£i n·∫øu c√≥ */}
                          {promotionLoading && (
                            <div className="flex justify-between mb-2 text-blue-600">
                              <span className="text-sm">ƒêang t√¨m khuy·∫øn m√£i...</span>
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                            </div>
                          )}
                          
                          {bestPromotion && !promotionLoading && (
                            <div className="flex justify-between mb-2 text-green-600">
                              <span className="text-sm flex items-center">
                                <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                                </svg>
                                {bestPromotion.name}
                              </span>
                              <span className="font-medium">-{formatPrice(discountAmount)}</span>
                            </div>
                          )}
                          
                          {/* ƒê∆∞·ªùng k·∫ª ph√¢n c√°ch */}
                          <div className="border-t border-gray-200 pt-2">
                            <div className="flex justify-between">
                              <span className="font-medium text-gray-900">T·ªïng c·ªông</span>
                              <span className={`font-bold text-lg ${bestPromotion ? 'text-green-600' : 'text-gray-900'}`}>
                                {formatPrice(finalPrice)}
                              </span>
                            </div>
                            
                            {bestPromotion && (
                              <div className="text-xs text-green-600 text-right mt-1">
                                ƒê√£ √°p d·ª•ng m√£: {bestPromotion.code}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <p className="text-gray-500">Vui l√≤ng ch·ªçn d·ªãch v·ª• ƒë·ªÉ xem th√¥ng tin chi ti·∫øt.</p>
                  )}
                </Card>
                
                <div className="mt-6">
                  <Card className="p-6">
                    <h2 className="text-lg font-medium text-gray-900 mb-4">üìû Th√¥ng tin li√™n h·ªá</h2>
                    
                    <div className="space-y-3">
                      <p className="text-sm text-gray-500">
                        <span className="font-medium text-gray-700">ƒêi·ªán tho·∫°i:</span> 0123 456 789
                      </p>
                      <p className="text-sm text-gray-500">
                        <span className="font-medium text-gray-700">Email:</span> support@cleanhome.vn
                      </p>
                      <p className="text-sm text-gray-500">
                        <span className="font-medium text-gray-700">Gi·ªù l√†m vi·ªác:</span> 8:00 - 17:00 (Th·ª© 2 - Ch·ªß nh·∫≠t)
                      </p>
                      
                      {/* Th√¥ng tin h·ªó tr·ª£ thanh to√°n */}
                      <div className="border-t pt-3 mt-4">
                        <p className="text-sm text-gray-500">
                          <span className="font-medium text-gray-700">üí≥ H·ªó tr·ª£ thanh to√°n:</span>
                        </p>
                        <ul className="text-xs text-gray-400 mt-1 space-y-1">
                          <li>‚Ä¢ Ti·ªÅn m·∫∑t khi ho√†n th√†nh d·ªãch v·ª•</li>
                          <li>‚Ä¢ VNPAY - C√°c ng√¢n h√†ng n·ªôi ƒë·ªãa</li>
                          <li>‚Ä¢ H·ªó tr·ª£ 24/7 cho v·∫•n ƒë·ªÅ thanh to√°n</li>
                        </ul>
                      </div>
                    </div>
                  </Card>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default BookingForm;

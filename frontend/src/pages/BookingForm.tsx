import { useState, FormEvent, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useServiceContext } from '../context/ServiceContext';
import Card from '../components/UI/Card';
import Button from '../components/UI/Button';
import PaymentMethodModal from '../components/modals/PaymentMethodModal';
import AddressSelector, { AddressValue } from '../components/forms/AddressSelector';
import BookingService from '../services/booking.service';
import { formatFullAddress, getAddressNames } from '../data/vietnamAddress';

/**
 * Component trang ƒë·∫∑t l·ªãch d·ªãch v·ª•
 * Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn d·ªãch v·ª•, th·ªùi gian v√† ƒë·∫∑t l·ªãch v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n
 */

const BookingForm = () => {
  const { user } = useAuth();
  const { services } = useServiceContext();
  const navigate = useNavigate();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const serviceIdFromUrl = queryParams.get('service');
  
  // L·∫•y danh s√°ch d·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông
  const activeServices = services.filter(service => service.isActive);
  
  const [selectedService, setSelectedService] = useState<string>(serviceIdFromUrl || '');
  const [date, setDate] = useState<string>('');
  const [time, setTime] = useState<string>('');
  const [address, setAddress] = useState<AddressValue>({
    city: '',
    district: '',
    ward: '',
    houseNumber: '',
    alley: '',
    lane: '',
    street: '',
    specificAddress: ''
  });
  const [notes, setNotes] = useState<string>('');
  const [formErrors, setFormErrors] = useState<{
    service?: string;
    date?: string;
    time?: string;
    address?: string;
  }>({});
  const [bookingSuccess, setBookingSuccess] = useState<boolean>(false);
  const [showPaymentModal, setShowPaymentModal] = useState<boolean>(false);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  
  // L·∫•y th√¥ng tin d·ªãch v·ª• ƒë√£ ch·ªçn
  const selectedServiceDetails = activeServices.find(service => service.id === selectedService);
  
  // T√≠nh t·ªïng ti·ªÅn
  const totalPrice = selectedServiceDetails ? selectedServiceDetails.price : 0;
  
  // Format gi√° ti·ªÅn
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(price);
  };
  
  // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
  useEffect(() => {
    if (!user) {
      navigate('/login?redirect=booking');
    }
  }, [user, navigate]);
  
  // Ki·ªÉm tra form h·ª£p l·ªá
  const validateForm = () => {
    const errors: {
      service?: string;
      date?: string;
      time?: string;
      address?: string;
    } = {};
    let isValid = true;
    
    if (!selectedService) {
      errors.service = 'Vui l√≤ng ch·ªçn d·ªãch v·ª•';
      isValid = false;
    }
    
    if (!date) {
      errors.date = 'Vui l√≤ng ch·ªçn ng√†y';
      isValid = false;
    } else {
      const selectedDate = new Date(date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (selectedDate < today) {
        errors.date = 'Ng√†y kh√¥ng h·ª£p l·ªá';
        isValid = false;
      }
    }
    
    if (!time) {
      errors.time = 'Vui l√≤ng ch·ªçn gi·ªù';
      isValid = false;
    }
    
    // Ki·ªÉm tra ƒë·ªãa ch·ªâ - c·∫ßn c√≥ ƒë·ªß th√¥ng tin
    if (!address.city || !address.district || !address.ward || !address.houseNumber || !address.street) {
      errors.address = 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªãa ch·ªâ (th√†nh ph·ªë, qu·∫≠n/huy·ªán, ph∆∞·ªùng/x√£, s·ªë nh√†, t√™n ƒë∆∞·ªùng)';
      isValid = false;
    }
    
    setFormErrors(errors);
    return isValid;
  };
  
  /**
   * H√†m x·ª≠ l√Ω submit form - b∆∞·ªõc ƒë·∫ßu ti√™n
   * Validate d·ªØ li·ªáu v√† hi·ªÉn th·ªã modal ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
   */

  // X·ª≠ l√Ω ƒë·∫∑t l·ªãch - b∆∞·ªõc ƒë·∫ßu ti√™n: hi·ªÉn th·ªã modal thanh to√°n
  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      // Hi·ªÉn th·ªã modal ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
      setShowPaymentModal(true);
    }
  };

  /**
   * H√†m x·ª≠ l√Ω x√°c nh·∫≠n thanh to√°n v√† t·∫°o booking
   * G·ªçi API ƒë·ªÉ t·∫°o booking m·ªõi v·ªõi th√¥ng tin ƒë√£ nh·∫≠p
   * @param paymentMethod - Ph∆∞∆°ng th·ª©c thanh to√°n ƒë∆∞·ª£c ch·ªçn (hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ 'cash')
   */
  const handlePaymentConfirm = async (paymentMethod: string) => {
    try {
      setIsSubmitting(true);
      setShowPaymentModal(false);
      
      // Ki·ªÉm tra token tr∆∞·ªõc khi g·ª≠i request
      const token = localStorage.getItem('token');
      if (!token) {
        setFormErrors({ service: 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.' });
        navigate('/login?redirect=booking');
        return;
      }
      
      console.log('üí≥ ƒêang t·∫°o booking v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n:', paymentMethod);
      
      // L·∫•y th√¥ng tin d·ªãch v·ª• ƒë√£ ch·ªçn ƒë·ªÉ t√≠nh duration
      const selectedServiceInfo = activeServices.find(s => s.id === selectedService);
      const serviceDuration = selectedServiceInfo ? (selectedServiceInfo.duration || 120) / 60 : 2; // Chuy·ªÉn t·ª´ ph√∫t sang gi·ªù
      
      // T·∫°o chu·ªói ƒë·ªãa ch·ªâ t·ª´ object ƒë·ªãa ch·ªâ theo ƒë·ªãnh d·∫°ng chu·∫©n
      // L·∫•y t√™n th·ª±c t·∫ø t·ª´ ID
      const { cityName, districtName, wardName } = getAddressNames(
        address.city, 
        address.district, 
        address.ward
      );
      
      // S·ª≠ d·ª•ng h√†m formatFullAddress ƒë·ªÉ t·∫°o ƒë·ªãa ch·ªâ chu·∫©n
      const fullAddress = formatFullAddress(
        address.houseNumber,
        address.street,
        wardName,
        districtName, 
        cityName,
        address.alley,
        address.lane,
        address.specificAddress
      );
      
      // D·ªØ li·ªáu booking ƒë·ªÉ g·ª≠i l√™n API
      const bookingData = {
        service_id: selectedService,
        booking_date: date,
        booking_time: time,
        duration: serviceDuration, // S·ª≠ d·ª•ng duration t·ª´ selectedService (theo gi·ªù)
        customer_address: fullAddress, // Chuy·ªÉn object th√†nh string
        phone: user?.phone || '', // L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ th√¥ng tin user
        notes: notes,
        payment_method: paymentMethod as 'cash'
      };
      
      console.log('ÔøΩ Selected Service ID:', selectedService);
      console.log('üîç Selected Service Details:', selectedServiceInfo);
      console.log('ÔøΩüìã D·ªØ li·ªáu booking:', bookingData);
      
      // G·ªçi API t·∫°o booking
      const result = await BookingService.createBooking(bookingData);
      
      console.log('‚úÖ T·∫°o booking th√†nh c√¥ng:', result);
      
      // Emit custom event ƒë·ªÉ th√¥ng b√°o c√≥ booking m·ªõi
      window.dispatchEvent(new CustomEvent('newBookingCreated', { 
        detail: { booking: result } 
      }));
      
      // Hi·ªÉn th·ªã th√†nh c√¥ng v√† chuy·ªÉn h∆∞·ªõng
      setBookingSuccess(true);
      
      // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒë∆°n h√†ng sau 3 gi√¢y v·ªõi parameter refresh
      setTimeout(() => {
        navigate('/bookings?refresh=true');
      }, 3000);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o booking:', error);
      
      // X·ª≠ l√Ω l·ªói token expired
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as { response?: { status?: number; data?: { message?: string; error?: string } } };
        
        if (axiosError.response?.status === 401) {
          const errorData = axiosError.response.data;
          if (errorData?.error === 'token_expired' || errorData?.message?.includes('expired')) {
            alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p.');
            localStorage.removeItem('token');
            localStorage.removeItem('refresh_token');
            localStorage.removeItem('user');
            navigate('/login?redirect=booking&message=session_expired');
            return;
          }
        }
        
        const errorMessage = axiosError.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch';
        alert(errorMessage);
      } else {
        alert('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·ªãch. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // T·∫°o danh s√°ch c√°c khung gi·ªù c√≥ s·∫µn
  const availableTimeSlots = [
    '08:00', '09:00', '10:00', '11:00', '13:00', '14:00', '15:00', '16:00', '17:00'
  ];
  
  /**
   * H√†m t·∫°o danh s√°ch ng√†y trong 14 ng√†y t·ªõi
   * S·ª≠ d·ª•ng ƒë·ªÉ hi·ªÉn th·ªã options trong dropdown ch·ªçn ng√†y
   */
  const getNextTwoWeeks = () => {
    const dates = [];
    const today = new Date();
    
    for (let i = 1; i <= 14; i++) {
      const nextDate = new Date(today);
      nextDate.setDate(today.getDate() + i);
      dates.push(nextDate.toISOString().split('T')[0]);
    }
    
    return dates;
  };
  
  const availableDates = getNextTwoWeeks();
  
  return (
    <>
      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">ƒê·∫∑t l·ªãch d·ªãch v·ª•</h1>
          
          {bookingSuccess ? (
            <Card className="p-6">
              <div className="text-center">
                <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                  <svg className="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <h3 className="mt-3 text-lg font-medium text-gray-900">ƒê·∫∑t l·ªãch th√†nh c√¥ng!</h3>
                <p className="mt-2 text-sm text-gray-500">
                  C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. ƒê∆°n ƒë·∫∑t l·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.
                  Ch√∫ng t√¥i s·∫Ω li√™n h·ªá ƒë·ªÉ x√°c nh·∫≠n trong th·ªùi gian s·ªõm nh·∫•t.
                </p>
                <p className="mt-1 text-sm text-gray-500">
                  B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang qu·∫£n l√Ω ƒë∆°n h√†ng sau 3 gi√¢y.
                </p>
                <div className="mt-5">
                  <Button
                    onClick={() => navigate('/bookings?refresh=true')}
                  >
                    Xem ƒë∆°n h√†ng c·ªßa t√¥i
                  </Button>
                </div>
              </div>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="md:col-span-2">
                <Card className="p-6">
                  <form onSubmit={handleSubmit} className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Ch·ªçn d·ªãch v·ª•
                      </label>
                      <select
                        value={selectedService}
                        onChange={(e) => setSelectedService(e.target.value)}
                        aria-label="Ch·ªçn d·ªãch v·ª•"
                        className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md ${
                          formErrors.service ? 'border-red-300' : ''
                        }`}
                        disabled={activeServices.length === 0}
                      >
                        <option value="">
                          {activeServices.length === 0 ? '-- Hi·ªán t·∫°i kh√¥ng c√≥ d·ªãch v·ª• n√†o --' : '-- Ch·ªçn d·ªãch v·ª• --'}
                        </option>
                        {activeServices.map((service) => (
                          <option key={service.id} value={service.id}>
                            {service.name} - {formatPrice(service.price)} - {service.duration ? `${service.duration}p` : '120p'}
                          </option>
                        ))}
                      </select>
                      {formErrors.service && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.service}</p>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Ch·ªçn ng√†y
                        </label>
                        <select
                          value={date}
                          onChange={(e) => setDate(e.target.value)}
                          aria-label="Ch·ªçn ng√†y"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md ${
                            formErrors.date ? 'border-red-300' : ''
                          }`}
                        >
                          <option value="">-- Ch·ªçn ng√†y --</option>
                          {availableDates.map((date) => {
                            // Format ng√†y cho hi·ªÉn th·ªã v·ªõi m√∫i gi·ªù Vi·ªát Nam
                            const dateObj = new Date(date + 'T00:00:00');
                            const formattedDate = dateObj.toLocaleDateString('vi-VN', {
                              weekday: 'long',
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric',
                              timeZone: 'Asia/Ho_Chi_Minh'
                            });
                            
                            return (
                              <option key={date} value={date}>
                                {formattedDate}
                              </option>
                            );
                          })}
                        </select>
                        {formErrors.date && (
                          <p className="mt-1 text-sm text-red-600">{formErrors.date}</p>
                        )}
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Ch·ªçn gi·ªù
                        </label>
                        <select
                          value={time}
                          onChange={(e) => setTime(e.target.value)}
                          aria-label="Ch·ªçn gi·ªù"
                          className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md ${
                            formErrors.time ? 'border-red-300' : ''
                          }`}
                        >
                          <option value="">-- Ch·ªçn gi·ªù --</option>
                          {availableTimeSlots.map((timeSlot) => (
                            <option key={timeSlot} value={timeSlot}>
                              {timeSlot}
                            </option>
                          ))}
                        </select>
                        {formErrors.time && (
                          <p className="mt-1 text-sm text-red-600">{formErrors.time}</p>
                        )}
                      </div>
                    </div>
                    
                    <div>
                      <AddressSelector
                        value={address}
                        onChange={(newAddress) => setAddress(newAddress)}
                        error={formErrors.address}
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Ghi ch√∫
                      </label>
                      <textarea
                        value={notes}
                        onChange={(e) => setNotes(e.target.value)}
                        rows={4}
                        className="shadow-sm focus:ring-blue-500 focus:border-blue-500 block w-full sm:text-sm "
                        placeholder="Th√¥ng tin th√™m v·ªÅ y√™u c·∫ßu c·ªßa b·∫°n..."
                      />
                    </div>
                    
                    <div>
                      <Button 
                        type="submit" 
                        fullwidth
                        disabled={isSubmitting}
                      >
                        {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : 'ƒê·∫∑t l·ªãch'}
                      </Button>
                    </div>
                  </form>
                </Card>
              </div>
              
              <div>
                <Card className="p-6">
                  <h2 className="text-lg font-medium text-gray-900 mb-4">Th√¥ng tin ƒë∆°n h√†ng</h2>
                  
                  {selectedServiceDetails ? (
                    <div>
                      <div className="mb-4">
                        <h3 className="font-medium text-gray-900">{selectedServiceDetails.name}</h3>
                        <p className="text-sm text-gray-500">{selectedServiceDetails.description}</p>
                      </div>
                      
                      <div className="border-t border-gray-200 pt-4">
                        <div className="flex justify-between mb-2">
                          <span className="text-gray-500">Gi√° d·ªãch v·ª•</span>
                          <span className="text-gray-900">{formatPrice(selectedServiceDetails.price)}</span>
                        </div>
                        
                        <div className="flex justify-between mb-2">
                          <span className="text-gray-500">Th·ªùi gian th·ª±c hi·ªán</span>
                          <span className="text-gray-900">
                            {(selectedServiceDetails.duration || 120) >= 60
                              ? `${Math.floor((selectedServiceDetails.duration || 120) / 60)} gi·ªù ${
                                  (selectedServiceDetails.duration || 120) % 60 ? `${(selectedServiceDetails.duration || 120) % 60} ph√∫t` : ''
                                }`
                              : `${selectedServiceDetails.duration || 120} ph√∫t`}
                          </span>
                        </div>
                        
                        <div className="border-t border-gray-200 pt-4 mt-4">
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">T·ªïng c·ªông</span>
                            <span className="font-medium text-gray-900">{formatPrice(totalPrice)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <p className="text-gray-500">Vui l√≤ng ch·ªçn d·ªãch v·ª• ƒë·ªÉ xem th√¥ng tin chi ti·∫øt.</p>
                  )}
                </Card>
                
                <div className="mt-6">
                  <Card className="p-6">
                    <h2 className="text-lg font-medium text-gray-900 mb-4">Th√¥ng tin li√™n h·ªá</h2>
                    
                    <div className="space-y-3">
                      <p className="text-sm text-gray-500">
                        <span className="font-medium text-gray-700">ƒêi·ªán tho·∫°i:</span> 0123 456 789
                      </p>
                      <p className="text-sm text-gray-500">
                        <span className="font-medium text-gray-700">Email:</span> support@cleanhome.vn
                      </p>
                      <p className="text-sm text-gray-500">
                        <span className="font-medium text-gray-700">Gi·ªù l√†m vi·ªác:</span> 8:00 - 18:00 (Th·ª© 2 - Ch·ªß nh·∫≠t)
                      </p>
                    </div>
                  </Card>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Modal ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n */}
      <PaymentMethodModal
        isOpen={showPaymentModal}
        onClose={() => setShowPaymentModal(false)}
        onConfirm={handlePaymentConfirm}
        totalAmount={totalPrice}
      />
    </>
  );
};

export default BookingForm;

"""
API endpoints cho qu·∫£n l√Ω ng∆∞·ªùi d√πng
ƒê·ªìng b·ªô v·ªõi schema SQL PostgreSQL
B·∫£ng: users, user_addresses
Author: CleanHome Team
"""

import os
from flask import Blueprint, request, jsonify, current_app
from flask_jwt_extended import jwt_required, get_jwt_identity
from marshmallow import ValidationError
from sqlalchemy.exc import IntegrityError
from werkzeug.utils import secure_filename
from werkzeug.datastructures import FileStorage

from app.extensions import db
from app.models.user import User
from app.schemas.user import (
    user_schema, users_schema, user_create_schema, user_update_schema,
    user_password_change_schema
)
from app.utils.errors import handle_error
from app.utils.validators import validate_uuid

users_bp = Blueprint('users', __name__)

# C√°c lo·∫°i file ·∫£nh ƒë∆∞·ª£c ph√©p
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}

def allowed_file(filename):
    """Ki·ªÉm tra file c√≥ ph·∫£i l√† ·∫£nh ƒë∆∞·ª£c ph√©p kh√¥ng"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@users_bp.route('/', methods=['GET'])
@jwt_required()
def get_users():
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng v·ªõi ph√¢n trang v√† b·ªô l·ªçc
    - Y√™u c·∫ßu JWT token
    - H·ªó tr·ª£ l·ªçc theo: role (admin/customer/staff), status, search
    - ƒê·ªìng b·ªô v·ªõi b·∫£ng users trong PostgreSQL
    """
    try:
        # L·∫•y tham s·ªë query
        page = request.args.get('page', 1, type=int)
        per_page = min(request.args.get('per_page', 20, type=int), 100)
        role = request.args.get('role')
        status = request.args.get('status')
        search = request.args.get('search')
        
        # Ki·ªÉm tra quy·ªÅn admin ho·∫∑c staff
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_staff():
            return jsonify({'error': 'Access denied. Staff role required.'}), 403
        
        # T·∫°o query c∆° b·∫£n
        query = User.query
        
        # √Åp d·ª•ng b·ªô l·ªçc
        if role:
            query = query.filter(User.role == role)
        
        if status:
            query = query.filter(User.status == status)
        
        if search:
            search_pattern = f'%{search}%'
            query = query.filter(
                db.or_(
                    User.name.ilike(search_pattern),
                    User.email.ilike(search_pattern),
                    User.phone.ilike(search_pattern)
                )
            )
        
        # Ph√¢n trang
        pagination = query.paginate(
            page=page, 
            per_page=per_page, 
            error_out=False
        )
        
        users = pagination.items
        
        return jsonify({
            'status': 'success',
            'data': {
                'users': users_schema.dump(users),
                'pagination': {
                    'page': page,
                    'per_page': per_page,
                    'total': pagination.total,
                    'pages': pagination.pages,
                    'has_next': pagination.has_next,
                    'has_prev': pagination.has_prev
                }
            }
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error fetching users: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500


@users_bp.route('/<user_id>', methods=['GET'])
@jwt_required()
def get_user(user_id):
    """L·∫•y th√¥ng tin chi ti·∫øt m·ªôt ng∆∞·ªùi d√πng"""
    try:
        # Validate UUID
        if not validate_uuid(user_id):
            return jsonify({'error': 'Invalid user ID format'}), 400
        
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        # Ch·ªâ cho ph√©p xem th√¥ng tin c·ªßa ch√≠nh m√¨nh ho·∫∑c admin/staff
        if str(current_user_id) != user_id and not current_user.is_staff():
            return jsonify({'error': 'Access denied'}), 403
        
        user = User.query.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404
        
        return jsonify({
            'status': 'success',
            'data': user_schema.dump(user)
        }), 200
        
    except Exception as e:
        current_app.logger.error(f"Error fetching user {user_id}: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500


@users_bp.route('/<user_id>', methods=['PUT'])
@jwt_required()
def update_user(user_id):
    """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"""
    try:
        # Validate UUID
        if not validate_uuid(user_id):
            return jsonify({'error': 'Invalid user ID format'}), 400
        
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        # Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh ho·∫∑c admin
        if str(current_user_id) != user_id and not current_user.is_admin():
            return jsonify({'error': 'Access denied'}), 403
        
        user = User.query.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404
        
        # Validate request data
        try:
            data = user_update_schema.load(request.json)
        except ValidationError as err:
            return jsonify({'error': 'Validation error', 'details': err.messages}), 400
        
        # C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p
        for field in ['name', 'phone', 'address', 'bio']:
            if field in data:
                setattr(user, field, data[field])
        
        # Ch·ªâ admin m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t status v√† role
        if current_user.is_admin():
            if 'status' in data:
                user.status = data['status']
            if 'role' in data:
                user.role = data['role']
        
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': 'User updated successfully',
            'data': user_schema.dump(user)
        }), 200
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error updating user {user_id}: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500


@users_bp.route('/<user_id>/avatar', methods=['POST'])
@jwt_required()
def upload_avatar(user_id):
    """
    Upload ·∫£nh ƒë·∫°i di·ªán cho ng∆∞·ªùi d√πng
    - Ch·ªâ cho ph√©p user t·ª± upload avatar c·ªßa m√¨nh ho·∫∑c admin
    - Ki·ªÉm tra lo·∫°i file v√† k√≠ch th∆∞·ªõc (max 5MB)
    - L∆∞u file v√†o th∆∞ m·ª•c static/uploads/avatars/
    - C·∫≠p nh·∫≠t URL avatar v√†o database
    """
    try:
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng UUID c·ªßa user_id
        if not validate_uuid(user_id):
            return jsonify({'error': 'Invalid user ID format'}), 400
        
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        # Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t avatar c·ªßa ch√≠nh m√¨nh ho·∫∑c admin
        if str(current_user_id) != user_id and not current_user.is_admin():
            return jsonify({'error': 'Access denied'}), 403
        
        user = User.query.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404
        
        # Ki·ªÉm tra c√≥ file upload trong request kh√¥ng
        if 'avatar' not in request.files:
            return jsonify({'error': 'No file provided'}), 400
        
        file = request.files['avatar']
        if file.filename == '':
            return jsonify({'error': 'No file selected'}), 400
        
        # Ki·ªÉm tra lo·∫°i file c√≥ ph·∫£i ·∫£nh kh√¥ng
        if not allowed_file(file.filename):
            return jsonify({'error': 'Invalid file type. Only images are allowed.'}), 400
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (t·ªëi ƒëa 5MB)
        file.seek(0, 2)  # Di chuy·ªÉn pointer ƒë·∫øn cu·ªëi file ƒë·ªÉ ƒëo size
        file_size = file.tell()
        file.seek(0)  # Reset pointer v·ªÅ ƒë·∫ßu file
        
        if file_size > 5 * 1024 * 1024:  # 5MB
            return jsonify({'error': 'File too large. Maximum size is 5MB.'}), 400
        
        # T·∫°o t√™n file an to√†n v√† unique
        filename = secure_filename(file.filename)
        file_extension = filename.rsplit('.', 1)[1].lower()
        new_filename = f"avatar_{user_id}_{hash(current_app.config.get('SECRET_KEY', '')) % 1000000}.{file_extension}"
        
        # T·∫°o th∆∞ m·ª•c uploads/avatars n·∫øu ch∆∞a c√≥
        upload_folder = os.path.join(current_app.config['UPLOAD_FOLDER'], 'avatars')
        os.makedirs(upload_folder, exist_ok=True)
        current_app.logger.info(f"üìÅ Th∆∞ m·ª•c upload: {upload_folder}")
        
        # X√≥a avatar c≈© n·∫øu c√≥ ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng
        if user.avatar:
            old_avatar_path = os.path.join(current_app.config['UPLOAD_FOLDER'], user.avatar.lstrip('/static/uploads/'))
            if os.path.exists(old_avatar_path):
                try:
                    os.remove(old_avatar_path)
                    current_app.logger.info(f"ƒê√£ x√≥a avatar c≈©: {old_avatar_path}")
                except Exception as e:
                    current_app.logger.warning(f"Kh√¥ng th·ªÉ x√≥a avatar c≈©: {str(e)}")
        
        # L∆∞u file m·ªõi v√†o th∆∞ m·ª•c
        file_path = os.path.join(upload_folder, new_filename)
        file.save(file_path)
        current_app.logger.info(f"ƒê√£ l∆∞u avatar m·ªõi: {file_path}")
        
        # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n avatar trong database
        avatar_url = f"/static/uploads/avatars/{new_filename}"
        user.avatar = avatar_url
        
        db.session.commit()
        current_app.logger.info(f"ƒê√£ c·∫≠p nh·∫≠t avatar cho user {user_id}: {avatar_url}")
        
        return jsonify({
            'status': 'success',
            'message': 'Avatar uploaded successfully',
            'data': {
                'avatar_url': avatar_url,
                'user': user_schema.dump(user)
            }
        }), 200
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"L·ªói khi upload avatar cho user {user_id}: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500


@users_bp.route('/<user_id>/change-password', methods=['POST'])
@jwt_required()
def change_password(user_id):
    """ƒê·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng"""
    try:
        # Validate UUID
        if not validate_uuid(user_id):
            return jsonify({'error': 'Invalid user ID format'}), 400
        
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        # Ch·ªâ cho ph√©p ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ch√≠nh m√¨nh ho·∫∑c admin
        if str(current_user_id) != user_id and not current_user.is_admin():
            return jsonify({'error': 'Access denied'}), 403
        
        user = User.query.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404
        
        # Validate request data
        try:
            data = user_password_change_schema.load(request.json)
        except ValidationError as err:
            return jsonify({'error': 'Validation error', 'details': err.messages}), 400
        
        # N·∫øu kh√¥ng ph·∫£i admin th√¨ ph·∫£i cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i
        if not current_user.is_admin() or str(current_user_id) == user_id:
            if not user.check_password(data['current_password']):
                return jsonify({'error': 'Current password is incorrect'}), 400
        
        # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        user.set_password(data['new_password'])
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': 'Password changed successfully'
        }), 200
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error changing password for user {user_id}: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500


@users_bp.route('/<user_id>', methods=['DELETE'])
@jwt_required()
def delete_user(user_id):
    """X√≥a ng∆∞·ªùi d√πng (Ch·ªâ Admin)"""
    try:
        # Validate UUID
        if not validate_uuid(user_id):
            return jsonify({'error': 'Invalid user ID format'}), 400
        
        current_user_id = get_jwt_identity()
        current_user = User.query.get(current_user_id)
        
        if not current_user or not current_user.is_admin():
            return jsonify({'error': 'Access denied. Admin role required.'}), 403
        
        user = User.query.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404
        
        # Kh√¥ng cho ph√©p x√≥a ch√≠nh m√¨nh
        if str(current_user_id) == user_id:
            return jsonify({'error': 'Cannot delete your own account'}), 400
        
        # X√≥a avatar n·∫øu c√≥
        if user.avatar:
            avatar_path = os.path.join(current_app.config['UPLOAD_FOLDER'], user.avatar.lstrip('/static/uploads/'))
            if os.path.exists(avatar_path):
                try:
                    os.remove(avatar_path)
                    current_app.logger.info(f"ƒê√£ x√≥a avatar khi x√≥a user: {avatar_path}")
                except Exception as e:
                    current_app.logger.warning(f"Could not delete avatar: {str(e)}")
        
        db.session.delete(user)
        db.session.commit()
        
        return jsonify({
            'status': 'success',
            'message': 'User deleted successfully'
        }), 200
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Error deleting user {user_id}: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500


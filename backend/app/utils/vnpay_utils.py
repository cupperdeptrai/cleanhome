"""
Utility functions cho x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n VNPAY
Mapping c√°c response code ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p
"""

def get_vnpay_response_message(response_code, transaction_status=None):
    """
    L·∫•y th√¥ng b√°o ti·∫øng Vi·ªát t∆∞∆°ng ·ª©ng v·ªõi m√£ response c·ªßa VNPAY
    
    Args:
        response_code (str): M√£ response t·ª´ VNPAY
        transaction_status (str): Tr·∫°ng th√°i giao d·ªãch t·ª´ VNPAY
    
    Returns:
        tuple: (success: bool, message: str, error_type: str)
    """
    
    # Mapping c√°c response code c·ªßa VNPAY theo t√†i li·ªáu API
    response_codes = {
        # Th√†nh c√¥ng
        '00': {
            'success': True,
            'message': 'Giao d·ªãch th√†nh c√¥ng',
            'error_type': 'success'
        },
        
        # C√°c l·ªói v·ªÅ th·∫ª/t√†i kho·∫£n
        '05': {
            'success': False,
            'message': 'Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
            'error_type': 'insufficient_funds'
        },
        '06': {
            'success': False,
            'message': 'Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a ho·∫∑c ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t d·ªãch v·ª• giao d·ªãch tr·ª±c tuy·∫øn',
            'error_type': 'card_blocked'
        },
        '07': {
            'success': False,
            'message': 'Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ƒë√£ b·ªã t·∫°m kh√≥a',
            'error_type': 'card_suspended'
        },
        '09': {
            'success': False,
            'message': 'Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng',
            'error_type': 'not_registered'
        },
        '10': {
            'success': False,
            'message': 'Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn',
            'error_type': 'authentication_failed'
        },
        '11': {
            'success': False,
            'message': 'ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch',
            'error_type': 'timeout'
        },
        '12': {
            'success': False,
            'message': 'Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a',
            'error_type': 'card_locked'
        },
        '13': {
            'success': False,
            'message': 'Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP). Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch',
            'error_type': 'wrong_otp'
        },
        '24': {
            'success': False,
            'message': 'Kh√°ch h√†ng h·ªßy giao d·ªãch',
            'error_type': 'user_cancelled'
        },
        '51': {
            'success': False,
            'message': 'T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
            'error_type': 'insufficient_balance'
        },
        '65': {
            'success': False,
            'message': 'T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y',
            'error_type': 'daily_limit_exceeded'
        },
        '75': {
            'success': False,
            'message': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨',
            'error_type': 'bank_maintenance'
        },
        '79': {
            'success': False,
            'message': 'KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch',
            'error_type': 'password_attempts_exceeded'
        },
        
        # C√°c l·ªói h·ªá th·ªëng
        '99': {
            'success': False,
            'message': 'C√°c l·ªói kh√°c (l·ªói h·ªá th·ªëng)',
            'error_type': 'system_error'
        },
        
        # L·ªói default
        'default': {
            'success': False,
            'message': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i sau',
            'error_type': 'unknown_error'
        }
    }
    
    # L·∫•y th√¥ng tin t∆∞∆°ng ·ª©ng v·ªõi response code
    if response_code in response_codes:
        result = response_codes[response_code]
    else:
        result = response_codes['default']
    
    return result['success'], result['message'], result['error_type']

def classify_vnpay_error_for_test_cards(response_code):
    """
    Ph√¢n lo·∫°i l·ªói VNPAY ƒë·ªÉ mapping v·ªõi c√°c th·∫ª test
    
    Mapping d·ª±a tr√™n t√†i li·ªáu VNPAY test cards:
    - Th·∫ª m√£ 1 (9704198526191432198): Th√†nh c√¥ng -> Response Code 00
    - Th·∫ª m√£ 2 (9704195798459170488): Kh√¥ng ƒë·ªß s·ªë d∆∞ -> Response Code 05/51  
    - Th·∫ª m√£ 3 (9704192181368742): Ch∆∞a k√≠ch ho·∫°t -> Response Code 06/09
    - Th·∫ª m√£ 4 (9704193370791314): Th·∫ª b·ªã kh√≥a -> Response Code 07/12
    - Th·∫ª m√£ 5 (9704194841945513): Th·∫ª h·∫øt h·∫°n -> Response Code 11
    
    Args:
        response_code (str): M√£ response t·ª´ VNPAY
    
    Returns:
        str: Lo·∫°i th·∫ª test t∆∞∆°ng ·ª©ng
    """
    
    # Mapping response code v·ªõi c√°c th·∫ª test c·ªßa VNPAY theo t√†i li·ªáu ch√≠nh th·ª©c
    test_card_mapping = {
        '00': 'success_card',           # Th·∫ª m√£ 1 - Th√†nh c√¥ng (9704198526191432198)
        '05': 'insufficient_funds',     # Th·∫ª m√£ 2 - Kh√¥ng ƒë·ªß s·ªë d∆∞ (9704195798459170488)
        '51': 'insufficient_funds',     # Th·∫ª m√£ 2 - Kh√¥ng ƒë·ªß s·ªë d∆∞ (m√£ t∆∞∆°ng ƒë∆∞∆°ng)
        '06': 'not_activated',          # Th·∫ª m√£ 3 - Ch∆∞a k√≠ch ho·∫°t (9704192181368742)
        '09': 'not_activated',          # Th·∫ª m√£ 3 - Ch∆∞a k√≠ch ho·∫°t (m√£ t∆∞∆°ng ƒë∆∞∆°ng)
        '07': 'card_blocked',           # Th·∫ª m√£ 4 - Th·∫ª b·ªã kh√≥a (9704193370791314)
        '12': 'card_blocked',           # Th·∫ª m√£ 4 - Th·∫ª b·ªã kh√≥a (m√£ t∆∞∆°ng ƒë∆∞∆°ng)
        '11': 'expired_card',           # Th·∫ª m√£ 5 - Th·∫ª h·∫øt h·∫°n (9704194841945513)
        '24': 'user_cancelled',         # Ng∆∞·ªùi d√πng h·ªßy giao d·ªãch
        '13': 'wrong_otp',              # Sai OTP (123456 l√† OTP test ƒë√∫ng)
        '10': 'authentication_failed',  # X√°c th·ª±c th·∫•t b·∫°i qu√° 3 l·∫ßn
        '79': 'password_attempts_exceeded', # Nh·∫≠p sai m·∫≠t kh·∫©u qu√° s·ªë l·∫ßn quy ƒë·ªãnh
        '65': 'daily_limit_exceeded',   # V∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y
        '75': 'bank_maintenance',       # Ng√¢n h√†ng ƒëang b·∫£o tr√¨
        '99': 'system_error'            # L·ªói h·ªá th·ªëng
    }
    
    return test_card_mapping.get(response_code, 'unknown_error')

def get_user_friendly_message(response_code, card_type=None):
    """
    L·∫•y th√¥ng b√°o th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng d·ª±a tr√™n response code
    
    Args:
        response_code (str): M√£ response t·ª´ VNPAY
        card_type (str): Lo·∫°i th·∫ª test (optional)
    
    Returns:
        dict: Th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
    """
    
    success, message, error_type = get_vnpay_response_message(response_code)
    card_classification = classify_vnpay_error_for_test_cards(response_code)
    
    # Th√¥ng b√°o c·ª• th·ªÉ cho t·ª´ng lo·∫°i l·ªói
    user_messages = {
        'success_card': {
            'title': '‚úÖ Thanh to√°n th√†nh c√¥ng',
            'message': 'C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n. ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.',
            'action': 'Xem ƒë∆°n h√†ng',
            'color': 'green'
        },
        'insufficient_funds': {
            'title': 'üí≥ Th·∫ª kh√¥ng ƒë·ªß s·ªë d∆∞',
            'message': 'T√†i kho·∫£n c·ªßa b·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y. Vui l√≤ng ki·ªÉm tra s·ªë d∆∞ ho·∫∑c s·ª≠ d·ª•ng th·∫ª kh√°c.',
            'action': 'Th·ª≠ l·∫°i',
            'color': 'red'
        },
        'not_activated': {
            'title': 'üîí Th·∫ª ch∆∞a k√≠ch ho·∫°t',
            'message': 'Th·∫ª/t√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t d·ªãch v·ª• thanh to√°n tr·ª±c tuy·∫øn. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng ƒë·ªÉ k√≠ch ho·∫°t.',
            'action': 'Li√™n h·ªá ng√¢n h√†ng',
            'color': 'orange'
        },
        'card_blocked': {
            'title': 'üö´ Th·∫ª b·ªã kh√≥a',
            'message': 'Th·∫ª/t√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
            'action': 'Li√™n h·ªá ng√¢n h√†ng',
            'color': 'red'
        },
        'expired_card': {
            'title': '‚è∞ Th·∫ª h·∫øt h·∫°n',
            'message': 'Th·∫ª c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n ho·∫∑c phi√™n giao d·ªãch ƒë√£ h·∫øt th·ªùi gian. Vui l√≤ng s·ª≠ d·ª•ng th·∫ª kh√°c.',
            'action': 'Th·ª≠ l·∫°i',
            'color': 'gray'
        },
        'wrong_otp': {
            'title': 'üî¢ Sai m√£ OTP',
            'message': 'B·∫°n ƒë√£ nh·∫≠p sai m√£ OTP. Vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch v√† nh·∫≠p ƒë√∫ng m√£ OTP.',
            'action': 'Th·ª≠ l·∫°i',
            'color': 'orange'
        },
        'user_cancelled': {
            'title': '‚ùå ƒê√£ h·ªßy giao d·ªãch',
            'message': 'B·∫°n ƒë√£ h·ªßy giao d·ªãch thanh to√°n. ƒê∆°n h√†ng v·∫´n ƒë∆∞·ª£c gi·ªØ, b·∫°n c√≥ th·ªÉ thanh to√°n l·∫°i.',
            'action': 'Thanh to√°n l·∫°i',
            'color': 'blue'
        },
        'system_error': {
            'title': '‚ö†Ô∏è L·ªói h·ªá th·ªëng',
            'message': 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.',
            'action': 'Th·ª≠ l·∫°i',
            'color': 'red'
        },
        'unknown_error': {
            'title': '‚ùì L·ªói kh√¥ng x√°c ƒë·ªãnh',
            'message': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i sau.',
            'action': 'Th·ª≠ l·∫°i',
            'color': 'gray'
        }
    }
    
    result = user_messages.get(card_classification, user_messages['unknown_error'])
    result['response_code'] = response_code
    result['error_type'] = error_type
    result['success'] = success
    
    return result

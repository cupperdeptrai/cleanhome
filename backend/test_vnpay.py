"""
Script test VNPay integration
Ch·∫°y script n√†y ƒë·ªÉ test c√°c ch·ª©c nƒÉng VNPay
"""

import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n backend v√†o sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.utils.vnpay import VNPayConfig
from flask import Flask

def test_vnpay_config():
    """Test VNPay configuration"""
    
    app = Flask(__name__)
    app.config['VNPAY_TMN_CODE'] = 'DEMOMCP0'
    app.config['VNPAY_HASH_SECRET'] = 'RAOEXHYVSDDIIENYWSLDIIZTANXUXZFJ'
    
    with app.app_context():
        vnpay = VNPayConfig()
        
        print("=== VNPay Configuration Test ===")
        print(f"Payment URL: {vnpay.vnp_payment_url}")
        print(f"Return URL: {vnpay.vnp_return_url}")
        print(f"TMN Code: {vnpay.vnp_tmncode}")
        print(f"Hash Secret: {vnpay.vnp_hashsecret[:10]}...")
        
        # Test t·∫°o payment URL
        test_order_id = "test_order_123"
        test_amount = 100000  # 100,000 VND
        test_desc = "Test payment CleanHome"
        
        payment_url = vnpay.get_payment_url(
            order_id=test_order_id,
            amount=test_amount,
            order_desc=test_desc
        )
        
        print(f"\n=== Test Payment URL ===")
        print(f"Order ID: {test_order_id}")
        print(f"Amount: {test_amount:,} VND")
        print(f"Description: {test_desc}")
        print(f"Payment URL: {payment_url}")
        
        # Test validate response
        print(f"\n=== Test Response Validation ===")
        
        # Gi·∫£ l·∫≠p response t·ª´ VNPay (success)
        test_response = {
            'vnp_Amount': '10000000',  # 100,000 * 100
            'vnp_BankCode': 'NCB',
            'vnp_BankTranNo': 'VNP14123456',
            'vnp_CardType': 'ATM',
            'vnp_OrderInfo': 'Test payment CleanHome',
            'vnp_PayDate': '20250624100000',
            'vnp_ResponseCode': '00',
            'vnp_TmnCode': 'DEMOMCP0',
            'vnp_TransactionNo': '14123456',
            'vnp_TransactionStatus': '00',
            'vnp_TxnRef': test_order_id,
            'vnp_SecureHashType': 'SHA512'
        }
        
        # T·∫°o hash cho test response
        import urllib.parse
        sorted_params = sorted(test_response.items())
        query_string = '&'.join([f"{key}={urllib.parse.quote_plus(str(value))}" for key, value in sorted_params])
        secure_hash = vnpay._create_secure_hash(query_string)
        
        test_response['vnp_SecureHash'] = secure_hash
        
        is_valid = vnpay.validate_response(test_response.copy())
        print(f"Response validation: {'‚úÖ VALID' if is_valid else '‚ùå INVALID'}")
        
        return True

def test_bank_codes():
    """Test c√°c m√£ ng√¢n h√†ng VNPay h·ªó tr·ª£"""
    
    bank_codes = {
        'VIETCOMBANK': 'Ng√¢n h√†ng TMCP Ngo·∫°i Th∆∞∆°ng Vi·ªát Nam',
        'VIETINBANK': 'Ng√¢n h√†ng TMCP C√¥ng Th∆∞∆°ng Vi·ªát Nam', 
        'BIDV': 'Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam',
        'AGRIBANK': 'Ng√¢n h√†ng N√¥ng nghi·ªáp v√† Ph√°t tri·ªÉn N√¥ng th√¥n Vi·ªát Nam',
        'OCB': 'Ng√¢n h√†ng TMCP Ph∆∞∆°ng ƒê√¥ng',
        'MB': 'Ng√¢n h√†ng TMCP Qu√¢n ƒë·ªôi',
        'TECHCOMBANK': 'Ng√¢n h√†ng TMCP K·ªπ th∆∞∆°ng Vi·ªát Nam',
        'ACB': 'Ng√¢n h√†ng TMCP √Å Ch√¢u',
        'VPBANK': 'Ng√¢n h√†ng TMCP Vi·ªát Nam Th·ªãnh v∆∞·ª£ng',
        'TPB': 'Ng√¢n h√†ng TMCP Ti√™n Phong',
        'SACOMBANK': 'Ng√¢n h√†ng TMCP S√†i G√≤n Th∆∞∆°ng T√≠n',
        'HDBANK': 'Ng√¢n h√†ng TMCP Ph√°t tri·ªÉn Th√†nh ph·ªë H·ªì Ch√≠ Minh',
        'VIETCAPITALBANK': 'Ng√¢n h√†ng TMCP B·∫£n Vi·ªát',
        'SCB': 'Ng√¢n h√†ng TMCP S√†i G√≤n',
        'VIB': 'Ng√¢n h√†ng TMCP Qu·ªëc t·∫ø Vi·ªát Nam',
        'SHB': 'Ng√¢n h√†ng TMCP S√†i G√≤n - H√† N·ªôi',
        'EXIMBANK': 'Ng√¢n h√†ng TMCP Xu·∫•t Nh·∫≠p kh·∫©u Vi·ªát Nam',
        'MSBANK': 'Ng√¢n h√†ng TMCP H√†ng H·∫£i',
        'NAMABANK': 'Ng√¢n h√†ng TMCP Nam √Å',
        'VNMART': 'V√≠ ƒëi·ªán t·ª≠ VnMart',
        'VIETQR': 'C·ªïng qu√©t m√£ VietQR',
        'VISA': 'Th·∫ª qu·ªëc t·∫ø Visa',
        'MASTERCARD': 'Th·∫ª qu·ªëc t·∫ø MasterCard',
        'JCB': 'Th·∫ª qu·ªëc t·∫ø JCB'
    }
    
    print("\n=== C√°c ng√¢n h√†ng VNPay h·ªó tr·ª£ ===")
    for code, name in bank_codes.items():
        print(f"{code:15} - {name}")

if __name__ == "__main__":
    print("üöÄ Testing VNPay Integration for CleanHome")
    print("=" * 50)
    
    try:
        test_vnpay_config()
        test_bank_codes()
        
        print("\n" + "=" * 50)
        print("‚úÖ VNPay integration test completed successfully!")
        print("\nüìù Next steps:")
        print("1. C·∫≠p nh·∫≠t database v·ªõi migration: flask db upgrade")
        print("2. Restart backend server")
        print("3. Test API endpoints v·ªõi Postman ho·∫∑c frontend")
        print("4. C·∫•u h√¨nh VNPay credentials th·∫≠t trong production")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {str(e)}")
        import traceback
        traceback.print_exc()

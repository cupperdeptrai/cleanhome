"""Initial migration with PostgreSQL

Revision ID: d9aec16ab29d
Revises: 
Create Date: 2025-06-10 08:49:49.649949

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd9aec16ab29d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transaction_logs')
    op.drop_table('notification_settings')
    with op.batch_alter_table('bookings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_bookings_date'))
        batch_op.drop_index(batch_op.f('idx_bookings_payment_status'))
        batch_op.drop_index(batch_op.f('idx_bookings_staff'))
        batch_op.drop_index(batch_op.f('idx_bookings_status'))
        batch_op.drop_index(batch_op.f('idx_bookings_user'))

    op.drop_table('bookings')
    with op.batch_alter_table('user_activity_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_user_activity_logs_type'))
        batch_op.drop_index(batch_op.f('idx_user_activity_logs_user'))

    op.drop_table('user_activity_logs')
    with op.batch_alter_table('services', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_services_category'))
        batch_op.drop_index(batch_op.f('idx_services_status'))

    op.drop_table('services')
    op.drop_table('service_categories')
    op.drop_table('areas')
    op.drop_table('booking_promotions')
    op.drop_table('settings')
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_reviews_service'))
        batch_op.drop_index(batch_op.f('idx_reviews_user'))

    op.drop_table('reviews')
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_notifications_read'))
        batch_op.drop_index(batch_op.f('idx_notifications_user'))

    op.drop_table('notifications')
    with op.batch_alter_table('staff_schedules', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_staff_schedules_date'))
        batch_op.drop_index(batch_op.f('idx_staff_schedules_staff'))

    op.drop_table('staff_schedules')
    op.drop_table('payments')
    with op.batch_alter_table('booking_items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_booking_items_booking'))
        batch_op.drop_index(batch_op.f('idx_booking_items_service'))

    op.drop_table('booking_items')
    op.drop_table('promotions')
    op.drop_table('service_areas')
    op.drop_table('payment_methods')
    with op.batch_alter_table('user_addresses', schema=None) as batch_op:
        batch_op.alter_column('address_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('recipient_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('phone',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
        batch_op.alter_column('district',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('city',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_constraint(batch_op.f('user_addresses_user_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('role',
               existing_type=postgresql.ENUM('customer', 'staff', 'admin', name='user_role'),
               type_=sa.String(length=20),
               nullable=False,
               existing_server_default=sa.text("'customer'::user_role"))
        batch_op.alter_column('status',
               existing_type=postgresql.ENUM('active', 'inactive', 'locked', 'pending', name='user_status'),
               type_=sa.String(length=20),
               nullable=False,
               existing_server_default=sa.text("'active'::user_status"))
        batch_op.alter_column('email_verified_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('phone_verified_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('last_login_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('locked_until',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index(batch_op.f('idx_users_email'))
        batch_op.drop_index(batch_op.f('idx_users_role'))
        batch_op.drop_constraint(batch_op.f('users_email_key'), type_='unique')
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.create_unique_constraint(batch_op.f('users_email_key'), ['email'])
        batch_op.create_index(batch_op.f('idx_users_role'), ['role'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_email'), ['email'], unique=False)
        batch_op.alter_column('updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('locked_until',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('last_login_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('phone_verified_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('email_verified_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('status',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('active', 'inactive', 'locked', 'pending', name='user_status'),
               nullable=True,
               existing_server_default=sa.text("'active'::user_status"))
        batch_op.alter_column('role',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('customer', 'staff', 'admin', name='user_role'),
               nullable=True,
               existing_server_default=sa.text("'customer'::user_role"))

    with op.batch_alter_table('user_addresses', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('user_addresses_user_id_fkey'), 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.alter_column('updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('city',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.alter_column('district',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.alter_column('phone',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
        batch_op.alter_column('recipient_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
        batch_op.alter_column('address_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)

    op.create_table('payment_methods',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('method_type', postgresql.ENUM('cash', 'bank_transfer', 'credit_card', 'momo', 'zalopay', name='payment_method'), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('account_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('account_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('payment_methods_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('payment_methods_pkey'))
    )
    op.create_table('service_areas',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('area_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['areas.id'], name=op.f('service_areas_area_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name=op.f('service_areas_service_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('service_areas_pkey')),
    sa.UniqueConstraint('service_id', 'area_id', name=op.f('service_areas_service_id_area_id_key'))
    )
    op.create_table('promotions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discount_type', postgresql.ENUM('percentage', 'fixed', name='discount_type'), autoincrement=False, nullable=False),
    sa.Column('discount_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('min_order_value', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_discount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('usage_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('used_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('user_specific', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('first_time_only', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('service_specific', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('category_specific', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', 'draft', name='service_status'), server_default=sa.text("'active'::service_status"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='promotions_pkey'),
    sa.UniqueConstraint('code', name='promotions_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('booking_items',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('booking_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('unit_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('subtotal', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('quantity > 0', name=op.f('booking_items_quantity_check')),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], name=op.f('booking_items_booking_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name=op.f('booking_items_service_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('booking_items_pkey'))
    )
    with op.batch_alter_table('booking_items', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_booking_items_service'), ['service_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_booking_items_booking'), ['booking_id'], unique=False)

    op.create_table('payments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('booking_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('payment_method', postgresql.ENUM('cash', 'bank_transfer', 'credit_card', 'momo', 'zalopay', name='payment_method'), autoincrement=False, nullable=False),
    sa.Column('transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('provider_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'completed', 'failed', 'refunded', name='transaction_status'), server_default=sa.text("'pending'::transaction_status"), autoincrement=False, nullable=True),
    sa.Column('payment_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('refund_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('refund_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('refund_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], name='payments_booking_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('staff_schedules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('staff_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('booking_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('available', 'booked', 'off', name='schedule_status'), server_default=sa.text("'available'::schedule_status"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], name=op.f('staff_schedules_booking_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['staff_id'], ['users.id'], name=op.f('staff_schedules_staff_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('staff_schedules_pkey'))
    )
    with op.batch_alter_table('staff_schedules', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_staff_schedules_staff'), ['staff_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_staff_schedules_date'), ['date'], unique=False)

    op.create_table('notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('notification_type', postgresql.ENUM('booking', 'payment', 'promotion', 'system', 'reminder', name='notification_type'), autoincrement=False, nullable=False),
    sa.Column('notification_channel', postgresql.ENUM('app', 'email', 'sms', name='notification_channel'), autoincrement=False, nullable=False),
    sa.Column('reference_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reference_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notifications_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_notifications_user'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_notifications_read'), ['is_read'], unique=False)

    op.create_table('reviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('booking_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('staff_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('images', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('admin_reply', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('admin_reply_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected', name='review_status'), server_default=sa.text("'pending'::review_status"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name=op.f('reviews_rating_check')),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], name=op.f('reviews_booking_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name=op.f('reviews_service_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['staff_id'], ['users.id'], name=op.f('reviews_staff_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('reviews_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('reviews_pkey'))
    )
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_reviews_user'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_reviews_service'), ['service_id'], unique=False)

    op.create_table('settings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), server_default=sa.text("'string'::character varying"), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('settings_pkey')),
    sa.UniqueConstraint('key', name=op.f('settings_key_key'))
    )
    op.create_table('booking_promotions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('booking_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('promotion_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('discount_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], name=op.f('booking_promotions_booking_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['promotion_id'], ['promotions.id'], name=op.f('booking_promotions_promotion_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('booking_promotions_pkey'))
    )
    op.create_table('areas',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('district', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'inactive', 'draft', name='service_status'), server_default=sa.text("'active'::service_status"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('areas_pkey'))
    )
    op.create_table('service_categories',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', 'draft', name='service_status'), server_default=sa.text("'active'::service_status"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='service_categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('services',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('short_description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('sale_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=50), server_default=sa.text("'Lần'::character varying"), autoincrement=False, nullable=True),
    sa.Column('thumbnail', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_featured', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('min_area', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_area', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('price_per_area', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('staff_count', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('active', 'inactive', 'draft', name='service_status'), server_default=sa.text("'active'::service_status"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['service_categories.id'], name=op.f('services_category_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('services_pkey')),
    sa.UniqueConstraint('slug', name=op.f('services_slug_key'))
    )
    with op.batch_alter_table('services', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_services_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_services_category'), ['category_id'], unique=False)

    op.create_table('user_activity_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('activity_type', postgresql.ENUM('login', 'logout', 'register', 'booking', 'payment', 'profile_update', 'password_change', name='activity_type'), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_activity_logs_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_activity_logs_pkey'))
    )
    with op.batch_alter_table('user_activity_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_user_activity_logs_user'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_user_activity_logs_type'), ['activity_type'], unique=False)

    op.create_table('bookings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('booking_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('address_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('staff_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('booking_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('booking_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'rescheduled', name='booking_status'), server_default=sa.text("'pending'::booking_status"), autoincrement=False, nullable=True),
    sa.Column('subtotal', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('discount', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('tax', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('payment_status', postgresql.ENUM('unpaid', 'pending', 'paid', 'refunded', 'failed', name='payment_status'), server_default=sa.text("'unpaid'::payment_status"), autoincrement=False, nullable=True),
    sa.Column('payment_method', postgresql.ENUM('cash', 'bank_transfer', 'credit_card', 'momo', 'zalopay', name='payment_method'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('customer_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('area', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('cancel_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cancelled_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('cancelled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['user_addresses.id'], name='bookings_address_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cancelled_by'], ['users.id'], name='bookings_cancelled_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['staff_id'], ['users.id'], name='bookings_staff_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='bookings_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='bookings_pkey'),
    sa.UniqueConstraint('booking_code', name='bookings_booking_code_key'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('bookings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_bookings_user'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_bookings_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_bookings_staff'), ['staff_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_bookings_payment_status'), ['payment_status'], unique=False)
        batch_op.create_index(batch_op.f('idx_bookings_date'), ['booking_date'], unique=False)

    op.create_table('notification_settings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification_type', postgresql.ENUM('booking', 'payment', 'promotion', 'system', 'reminder', name='notification_type'), autoincrement=False, nullable=False),
    sa.Column('app_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('email_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('sms_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notification_settings_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_settings_pkey')),
    sa.UniqueConstraint('user_id', 'notification_type', name=op.f('notification_settings_user_id_notification_type_key'))
    )
    op.create_table('transaction_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('booking_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('payment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('transaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'completed', 'failed', 'refunded', name='transaction_status'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], name=op.f('transaction_logs_booking_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], name=op.f('transaction_logs_payment_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('transaction_logs_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_logs_pkey'))
    )
    # ### end Alembic commands ###
